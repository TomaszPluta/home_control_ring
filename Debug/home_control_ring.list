
home_control_ring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000508  00025eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800050c  0800050c  0001050c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00005eb0  20000000  08000510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00025eb0  2**0
                  CONTENTS
  7 .bss          0000001c  20005eb0  20005eb0  00025eb0  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20005ecc  20005ecc  00025eb0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00025eb0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000008ae  00000000  00000000  00025ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000386  00000000  00000000  0002678e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000098  00000000  00000000  00026b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00026bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000005b1  00000000  00000000  00026c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000004b8  00000000  00000000  000271c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00027679  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000114  00000000  00000000  000276f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002780c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20005eb0 	.word	0x20005eb0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004f0 	.word	0x080004f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20005eb4 	.word	0x20005eb4
 80001c4:	080004f0 	.word	0x080004f0

080001c8 <_ZN3dacC1EPhm>:
  GPIOA->AFR[0] |= (1<<16) | (1<<19);

}


dac::dac(uint8_t * waveSampleArray, uint32_t  waveSampleNb){
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80001d4:	4a28      	ldr	r2, [pc, #160]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001d6:	4b28      	ldr	r3, [pc, #160]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001d8:	695b      	ldr	r3, [r3, #20]
 80001da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001de:	6153      	str	r3, [r2, #20]
	  RCC->AHBENR |= RCC_AHBENR_DMA2EN;
 80001e0:	4a25      	ldr	r2, [pc, #148]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001e2:	4b25      	ldr	r3, [pc, #148]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6153      	str	r3, [r2, #20]
	  RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;
 80001ec:	4a22      	ldr	r2, [pc, #136]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001ee:	4b22      	ldr	r3, [pc, #136]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001f0:	69db      	ldr	r3, [r3, #28]
 80001f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001f6:	61d3      	str	r3, [r2, #28]
	  RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80001f8:	4a1f      	ldr	r2, [pc, #124]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001fa:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <_ZN3dacC1EPhm+0xb0>)
 80001fc:	69db      	ldr	r3, [r3, #28]
 80001fe:	f043 0310 	orr.w	r3, r3, #16
 8000202:	61d3      	str	r3, [r2, #28]

	  GPIOA->MODER |= GPIO_MODER_MODER4_1;
 8000204:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[0] |= (1<<16) | (1<<19);
 8000214:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	6a1b      	ldr	r3, [r3, #32]
 800021e:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
 8000222:	6213      	str	r3, [r2, #32]

	  DAC->CR = DAC_CR_DMAEN1 | DAC_CR_TEN1 |  DAC_CR_EN1;
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <_ZN3dacC1EPhm+0xb4>)
 8000226:	f241 0205 	movw	r2, #4101	; 0x1005
 800022a:	601a      	str	r2, [r3, #0]

	  TIM6->ARR = 30;       // sampling freq (with prescaler)
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <_ZN3dacC1EPhm+0xb8>)
 800022e:	221e      	movs	r2, #30
 8000230:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM6->PSC = 300;       //prescaler
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <_ZN3dacC1EPhm+0xb8>)
 8000234:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000238:	629a      	str	r2, [r3, #40]	; 0x28
	  TIM6->CR2 |= TIM_CR2_MMS_1; // TRGO generated while timer overrun
 800023a:	4a11      	ldr	r2, [pc, #68]	; (8000280 <_ZN3dacC1EPhm+0xb8>)
 800023c:	4b10      	ldr	r3, [pc, #64]	; (8000280 <_ZN3dacC1EPhm+0xb8>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	f043 0320 	orr.w	r3, r3, #32
 8000244:	6053      	str	r3, [r2, #4]
	  TIM6->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN; // TIM6 enable
 8000246:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <_ZN3dacC1EPhm+0xb8>)
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <_ZN3dacC1EPhm+0xb8>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8000250:	6013      	str	r3, [r2, #0]


	  DMA2_Channel3->CNDTR = waveSampleNb; // number of data to transfer
 8000252:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <_ZN3dacC1EPhm+0xbc>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	6053      	str	r3, [r2, #4]
	  DMA2_Channel3->CPAR = (uint32_t)&(DAC->DHR8R1);
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <_ZN3dacC1EPhm+0xbc>)
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <_ZN3dacC1EPhm+0xc0>)
 800025c:	609a      	str	r2, [r3, #8]
	  DMA2_Channel3->CMAR = (uint32_t)waveSampleArray; //memory address register
 800025e:	4a09      	ldr	r2, [pc, #36]	; (8000284 <_ZN3dacC1EPhm+0xbc>)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	60d3      	str	r3, [r2, #12]
	  DMA2_Channel3->CCR = DMA_CCR_MINC | DMA_CCR_CIRC  | DMA_CCR_DIR | DMA_CCR_EN; // enable circular, memory increment,  dir from memory to dac
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <_ZN3dacC1EPhm+0xbc>)
 8000266:	22b1      	movs	r2, #177	; 0xb1
 8000268:	601a      	str	r2, [r3, #0]
}
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40007400 	.word	0x40007400
 8000280:	40001000 	.word	0x40001000
 8000284:	40020430 	.word	0x40020430
 8000288:	40007410 	.word	0x40007410

0800028c <main>:
#include "wave.h"
*/


int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 8000292:	f000 f89d 	bl	80003d0 <SystemCoreClockUpdate>
  	f_close(&fp);
*/



    dac dacObj(doorbelWav, doorbelWavLen);
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <main+0x1c>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4903      	ldr	r1, [pc, #12]	; (80002ac <main+0x20>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff92 	bl	80001c8 <_ZN3dacC1EPhm>
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <main+0x18>
 80002a6:	bf00      	nop
 80002a8:	20005e98 	.word	0x20005e98
 80002ac:	20000000 	.word	0x20000000

080002b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80002b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80002b6:	e003      	b.n	80002c0 <LoopCopyDataInit>

080002b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80002ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002be:	3104      	adds	r1, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80002c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002c8:	d3f6      	bcc.n	80002b8 <CopyDataInit>
	ldr	r2, =_sbss
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80002cc:	e002      	b.n	80002d4 <LoopFillZerobss>

080002ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80002ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80002d0:	f842 3b04 	str.w	r3, [r2], #4

080002d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LoopForever+0x16>)
	cmp	r2, r3
 80002d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002d8:	d3f9      	bcc.n	80002ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002da:	f000 f813 	bl	8000304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002de:	f000 f8e3 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002e2:	f7ff ffd3 	bl	800028c <main>

080002e6 <LoopForever>:

LoopForever:
    b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002e8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80002ec:	08000510 	.word	0x08000510
	ldr	r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002f4:	20005eb0 	.word	0x20005eb0
	ldr	r2, =_sbss
 80002f8:	20005eb0 	.word	0x20005eb0
	ldr	r3, = _ebss
 80002fc:	20005ecc 	.word	0x20005ecc

08000300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC1_2_IRQHandler>
	...

08000304 <SystemInit>:




void SystemInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000308:	4a2e      	ldr	r2, [pc, #184]	; (80003c4 <SystemInit+0xc0>)
 800030a:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <SystemInit+0xc0>)
 800030c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif



      RCC->CR |= RCC_CR_HSEON;   /*chose internal 16mhz as base clock*/
 8000318:	4a2b      	ldr	r2, [pc, #172]	; (80003c8 <SystemInit+0xc4>)
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <SystemInit+0xc4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000322:	6013      	str	r3, [r2, #0]
      while((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY); /*wake for internal source to be ready*/
 8000324:	bf00      	nop
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <SystemInit+0xc4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000332:	d1f8      	bne.n	8000326 <SystemInit+0x22>

      RCC->CR &= ~RCC_CR_PLLON; /* disable PLL  it could be configured only when it is  disabled*/
 8000334:	4a24      	ldr	r2, [pc, #144]	; (80003c8 <SystemInit+0xc4>)
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <SystemInit+0xc4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800033e:	6013      	str	r3, [r2, #0]

      FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <SystemInit+0xc8>)
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <SystemInit+0xc8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6013      	str	r3, [r2, #0]

      /* Reset CFGR register */
      RCC->CFGR = 0x00000000U;
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <SystemInit+0xc4>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
      RCC->CFGR |=  RCC_CFGR_PLLMUL9;
 8000352:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <SystemInit+0xc4>)
 8000354:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <SystemInit+0xc4>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800035c:	6053      	str	r3, [r2, #4]
      RCC->CFGR |=  RCC_CFGR_PLLSRC_HSE_PREDIV;
 800035e:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <SystemInit+0xc4>)
 8000360:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <SystemInit+0xc4>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000368:	6053      	str	r3, [r2, #4]
      RCC->CFGR |=  RCC_CFGR_PPRE2_DIV2;
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <SystemInit+0xc4>)
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <SystemInit+0xc4>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000374:	6053      	str	r3, [r2, #4]

      RCC->CR |= RCC_CR_PLLON;
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <SystemInit+0xc4>)
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <SystemInit+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000380:	6013      	str	r3, [r2, #0]
      while((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY);
 8000382:	bf00      	nop
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <SystemInit+0xc4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800038c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000390:	d1f8      	bne.n	8000384 <SystemInit+0x80>





      RCC->CFGR  |= RCC_CFGR_SW_PLL;
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <SystemInit+0xc4>)
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <SystemInit+0xc4>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	6053      	str	r3, [r2, #4]
      while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800039e:	bf00      	nop
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <SystemInit+0xc4>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f003 030c 	and.w	r3, r3, #12
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	d1f9      	bne.n	80003a0 <SystemInit+0x9c>

      /* Disable all interrupts */
      RCC->CIR = 0x00000000U;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <SystemInit+0xc4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]

      /* Configure the Vector Table location add offset address ------------------*/
    #ifdef VECT_TAB_SRAM
      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    #else
      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <SystemInit+0xc0>)
 80003b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003b8:	609a      	str	r2, [r3, #8]
    #endif
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40022000 	.word	0x40022000

080003d0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003e6:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <SystemCoreClockUpdate+0xc4>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	f003 030c 	and.w	r3, r3, #12
 80003ee:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d007      	beq.n	8000406 <SystemCoreClockUpdate+0x36>
 80003f6:	2b08      	cmp	r3, #8
 80003f8:	d009      	beq.n	800040e <SystemCoreClockUpdate+0x3e>
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d12f      	bne.n	800045e <SystemCoreClockUpdate+0x8e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 8000400:	4a26      	ldr	r2, [pc, #152]	; (800049c <SystemCoreClockUpdate+0xcc>)
 8000402:	601a      	str	r2, [r3, #0]
      break;
 8000404:	e02f      	b.n	8000466 <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 8000408:	4a24      	ldr	r2, [pc, #144]	; (800049c <SystemCoreClockUpdate+0xcc>)
 800040a:	601a      	str	r2, [r3, #0]
      break;
 800040c:	e02b      	b.n	8000466 <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800040e:	4b21      	ldr	r3, [pc, #132]	; (8000494 <SystemCoreClockUpdate+0xc4>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000416:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <SystemCoreClockUpdate+0xc4>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000420:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	0c9b      	lsrs	r3, r3, #18
 8000426:	3302      	adds	r3, #2
 8000428:	60bb      	str	r3, [r7, #8]
      {
        /* HSI oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
      }
#else      
      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d106      	bne.n	800043e <SystemCoreClockUpdate+0x6e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <SystemCoreClockUpdate+0xd0>)
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 800043a:	6013      	str	r3, [r2, #0]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
      break;
 800043c:	e013      	b.n	8000466 <SystemCoreClockUpdate+0x96>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <SystemCoreClockUpdate+0xc4>)
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	f003 030f 	and.w	r3, r3, #15
 8000446:	3301      	adds	r3, #1
 8000448:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <SystemCoreClockUpdate+0xcc>)
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 800045a:	6013      	str	r3, [r2, #0]
      break;
 800045c:	e003      	b.n	8000466 <SystemCoreClockUpdate+0x96>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <SystemCoreClockUpdate+0xcc>)
 8000462:	601a      	str	r2, [r3, #0]
      break;
 8000464:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <SystemCoreClockUpdate+0xc4>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	091b      	lsrs	r3, r3, #4
 800046c:	f003 030f 	and.w	r3, r3, #15
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <SystemCoreClockUpdate+0xd4>)
 8000472:	5cd3      	ldrb	r3, [r2, r3]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	fa22 f303 	lsr.w	r3, r2, r3
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <SystemCoreClockUpdate+0xc8>)
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	20005e9c 	.word	0x20005e9c
 800049c:	007a1200 	.word	0x007a1200
 80004a0:	003d0900 	.word	0x003d0900
 80004a4:	20005ea0 	.word	0x20005ea0

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4e0d      	ldr	r6, [pc, #52]	; (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	; (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1ba4      	subs	r4, r4, r6
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2500      	movs	r5, #0
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4e0b      	ldr	r6, [pc, #44]	; (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	; (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2500      	movs	r5, #0
 80004c6:	42a5      	cmp	r5, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d0:	4798      	blx	r3
 80004d2:	3501      	adds	r5, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004da:	4798      	blx	r3
 80004dc:	3501      	adds	r5, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
