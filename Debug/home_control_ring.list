
home_control_ring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08002f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000028  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000040  20000040  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003431  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a68  00000000  00000000  00023479  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002d8  00000000  00000000  00023ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000270  00000000  00000000  000241c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001988  00000000  00000000  00024430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001011  00000000  00000000  00025db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00026dc9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000a54  00000000  00000000  00026e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002789c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e58 	.word	0x08002e58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002e58 	.word	0x08002e58

080001c8 <get_fattime>:
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */


DWORD get_fattime (void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 80001cc:	4b02      	ldr	r3, [pc, #8]	; (80001d8 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 80001ce:	4618      	mov	r0, r3
 80001d0:	46bd      	mov	sp, r7
 80001d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d6:	4770      	bx	lr
 80001d8:	3e216000 	.word	0x3e216000

080001dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80001f0:	e007      	b.n	8000202 <mem_cpy+0x26>
		*d++ = *s++;
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	1c5a      	adds	r2, r3, #1
 80001f6:	617a      	str	r2, [r7, #20]
 80001f8:	693a      	ldr	r2, [r7, #16]
 80001fa:	1c51      	adds	r1, r2, #1
 80001fc:	6139      	str	r1, [r7, #16]
 80001fe:	7812      	ldrb	r2, [r2, #0]
 8000200:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	1e5a      	subs	r2, r3, #1
 8000206:	607a      	str	r2, [r7, #4]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d1f2      	bne.n	80001f2 <mem_cpy+0x16>
}
 800020c:	bf00      	nop
 800020e:	371c      	adds	r7, #28
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8000228:	e005      	b.n	8000236 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	1c5a      	adds	r2, r3, #1
 800022e:	617a      	str	r2, [r7, #20]
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	1e5a      	subs	r2, r3, #1
 800023a:	607a      	str	r2, [r7, #4]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f4      	bne.n	800022a <mem_set+0x12>
}
 8000240:	bf00      	nop
 8000242:	371c      	adds	r7, #28
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800024c:	b480      	push	{r7}
 800024e:	b089      	sub	sp, #36	; 0x24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	61fb      	str	r3, [r7, #28]
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8000264:	bf00      	nop
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	1e5a      	subs	r2, r3, #1
 800026a:	607a      	str	r2, [r7, #4]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00d      	beq.n	800028c <mem_cmp+0x40>
 8000270:	69fb      	ldr	r3, [r7, #28]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	61fa      	str	r2, [r7, #28]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4619      	mov	r1, r3
 800027a:	69bb      	ldr	r3, [r7, #24]
 800027c:	1c5a      	adds	r2, r3, #1
 800027e:	61ba      	str	r2, [r7, #24]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	1acb      	subs	r3, r1, r3
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0ec      	beq.n	8000266 <mem_cmp+0x1a>
	return r;
 800028c:	697b      	ldr	r3, [r7, #20]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3724      	adds	r7, #36	; 0x24
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr

0800029a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800029a:	b480      	push	{r7}
 800029c:	b083      	sub	sp, #12
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
 80002a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80002a4:	e002      	b.n	80002ac <chk_chr+0x12>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d005      	beq.n	80002c0 <chk_chr+0x26>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d1f2      	bne.n	80002a6 <chk_chr+0xc>
	return *str;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002de:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d048      	beq.n	800037a <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d030      	beq.n	8000352 <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	7858      	ldrb	r0, [r3, #1]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80002fa:	2301      	movs	r3, #1
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	f002 f8d5 	bl	80024ac <disk_write>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <move_window+0x3c>
				return FR_DISK_ERR;
 8000308:	2301      	movs	r3, #1
 800030a:	e037      	b.n	800037c <move_window+0xac>
			fs->wflag = 0;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	441a      	add	r2, r3
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	429a      	cmp	r2, r3
 8000320:	d917      	bls.n	8000352 <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	78db      	ldrb	r3, [r3, #3]
 8000326:	72fb      	strb	r3, [r7, #11]
 8000328:	e010      	b.n	800034c <move_window+0x7c>
					wsect += fs->fsize;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	7858      	ldrb	r0, [r3, #1]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800033e:	2301      	movs	r3, #1
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	f002 f8b3 	bl	80024ac <disk_write>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000346:	7afb      	ldrb	r3, [r7, #11]
 8000348:	3b01      	subs	r3, #1
 800034a:	72fb      	strb	r3, [r7, #11]
 800034c:	7afb      	ldrb	r3, [r7, #11]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d8eb      	bhi.n	800032a <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d010      	beq.n	800037a <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	7858      	ldrb	r0, [r3, #1]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000362:	2301      	movs	r3, #1
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	f002 f81d 	bl	80023a4 <disk_read>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <move_window+0xa4>
				return FR_DISK_ERR;
 8000370:	2301      	movs	r3, #1
 8000372:	e003      	b.n	800037c <move_window+0xac>
			fs->winsect = sector;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	683a      	ldr	r2, [r7, #0]
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
 800038c:	2100      	movs	r1, #0
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ff9e 	bl	80002d0 <move_window>
 8000394:	4603      	mov	r3, r0
 8000396:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 808e 	bne.w	80004bc <sync+0x138>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d17d      	bne.n	80004a4 <sync+0x120>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d079      	beq.n	80004a4 <sync+0x120>
			fs->winsect = 0;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	62da      	str	r2, [r3, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	3330      	adds	r3, #48	; 0x30
 80003ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff29 	bl	8000218 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2255      	movs	r2, #85	; 0x55
 80003ca:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	22aa      	movs	r2, #170	; 0xaa
 80003d2:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2252      	movs	r2, #82	; 0x52
 80003da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2252      	movs	r2, #82	; 0x52
 80003e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2261      	movs	r2, #97	; 0x61
 80003ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2241      	movs	r2, #65	; 0x41
 80003f2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2272      	movs	r2, #114	; 0x72
 80003fa:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2272      	movs	r2, #114	; 0x72
 8000402:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2241      	movs	r2, #65	; 0x41
 800040a:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2261      	movs	r2, #97	; 0x61
 8000412:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	b2da      	uxtb	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	691b      	ldr	r3, [r3, #16]
 8000426:	b29b      	uxth	r3, r3
 8000428:	0a1b      	lsrs	r3, r3, #8
 800042a:	b29b      	uxth	r3, r3
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	b2da      	uxtb	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	0e1b      	lsrs	r3, r3, #24
 8000448:	b2da      	uxtb	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	b29b      	uxth	r3, r3
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	b29b      	uxth	r3, r3
 8000466:	b2da      	uxtb	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	0c1b      	lsrs	r3, r3, #16
 8000474:	b2da      	uxtb	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	0e1b      	lsrs	r3, r3, #24
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	7858      	ldrb	r0, [r3, #1]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2301      	movs	r3, #1
 800049a:	f002 f807 	bl	80024ac <disk_write>
			fs->fsi_flag = 0;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f002 f8a5 	bl	80025fc <disk_ioctl>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <sync+0x138>
			res = FR_DISK_ERR;
 80004b8:	2301      	movs	r3, #1
 80004ba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
 80004ce:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	3b02      	subs	r3, #2
 80004d4:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	1e9a      	subs	r2, r3, #2
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d801      	bhi.n	80004e6 <clust2sect+0x20>
 80004e2:	2300      	movs	r3, #0
 80004e4:	e008      	b.n	80004f8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	461a      	mov	r2, r3
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	fb03 f202 	mul.w	r2, r3, r2
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f6:	4413      	add	r3, r2
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d904      	bls.n	800051e <get_fat+0x1a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	699a      	ldr	r2, [r3, #24]
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	429a      	cmp	r2, r3
 800051c:	d801      	bhi.n	8000522 <get_fat+0x1e>
		return 1;
 800051e:	2301      	movs	r3, #1
 8000520:	e09b      	b.n	800065a <get_fat+0x156>

	switch (fs->fs_type) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b02      	cmp	r3, #2
 8000528:	d046      	beq.n	80005b8 <get_fat+0xb4>
 800052a:	2b03      	cmp	r3, #3
 800052c:	d064      	beq.n	80005f8 <get_fat+0xf4>
 800052e:	2b01      	cmp	r3, #1
 8000530:	f040 8091 	bne.w	8000656 <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	085b      	lsrs	r3, r3, #1
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	4413      	add	r3, r2
 8000540:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6a1a      	ldr	r2, [r3, #32]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	0a5b      	lsrs	r3, r3, #9
 800054a:	4413      	add	r3, r2
 800054c:	4619      	mov	r1, r3
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff febe 	bl	80002d0 <move_window>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d176      	bne.n	8000648 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6a1a      	ldr	r2, [r3, #32]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	0a5b      	lsrs	r3, r3, #9
 8000578:	4413      	add	r3, r2
 800057a:	4619      	mov	r1, r3
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff fea7 	bl	80002d0 <move_window>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d161      	bne.n	800064c <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	461a      	mov	r2, r3
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	4313      	orrs	r3, r2
 800059e:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <get_fat+0xac>
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	e054      	b.n	800065a <get_fat+0x156>
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005b6:	e050      	b.n	800065a <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6a1a      	ldr	r2, [r3, #32]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	4413      	add	r3, r2
 80005c2:	4619      	mov	r1, r3
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe83 	bl	80002d0 <move_window>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d13f      	bne.n	8000650 <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80005d8:	3330      	adds	r3, #48	; 0x30
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	021b      	lsls	r3, r3, #8
 80005e8:	b21a      	sxth	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	e030      	b.n	800065a <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a1a      	ldr	r2, [r3, #32]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	09db      	lsrs	r3, r3, #7
 8000600:	4413      	add	r3, r2
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff fe63 	bl	80002d0 <move_window>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d121      	bne.n	8000654 <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3303      	adds	r3, #3
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	061a      	lsls	r2, r3, #24
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3302      	adds	r3, #2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	041b      	lsls	r3, r3, #16
 8000630:	4313      	orrs	r3, r2
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	3201      	adds	r2, #1
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	0212      	lsls	r2, r2, #8
 800063a:	4313      	orrs	r3, r2
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	4313      	orrs	r3, r2
 8000642:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000646:	e008      	b.n	800065a <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000648:	bf00      	nop
 800064a:	e004      	b.n	8000656 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800064c:	bf00      	nop
 800064e:	e002      	b.n	8000656 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000650:	bf00      	nop
 8000652:	e000      	b.n	8000656 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000654:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8000656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b088      	sub	sp, #32
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d904      	bls.n	800067e <put_fat+0x1c>
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	699a      	ldr	r2, [r3, #24]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	429a      	cmp	r2, r3
 800067c:	d802      	bhi.n	8000684 <put_fat+0x22>
		res = FR_INT_ERR;
 800067e:	2302      	movs	r3, #2
 8000680:	77fb      	strb	r3, [r7, #31]
 8000682:	e0e9      	b.n	8000858 <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d070      	beq.n	800076e <put_fat+0x10c>
 800068c:	2b03      	cmp	r3, #3
 800068e:	f000 8091 	beq.w	80007b4 <put_fat+0x152>
 8000692:	2b01      	cmp	r3, #1
 8000694:	f040 80d3 	bne.w	800083e <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	085b      	lsrs	r3, r3, #1
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	4413      	add	r3, r2
 80006a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6a1a      	ldr	r2, [r3, #32]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	0a5b      	lsrs	r3, r3, #9
 80006ae:	4413      	add	r3, r2
 80006b0:	4619      	mov	r1, r3
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f7ff fe0c 	bl	80002d0 <move_window>
 80006b8:	4603      	mov	r3, r0
 80006ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f040 80c0 	bne.w	8000844 <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ca:	3330      	adds	r3, #48	; 0x30
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00d      	beq.n	80006f8 <put_fat+0x96>
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	b25a      	sxtb	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	e001      	b.n	80006fc <put_fat+0x9a>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	7013      	strb	r3, [r2, #0]
			bc++;
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	3301      	adds	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2201      	movs	r2, #1
 800070a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6a1a      	ldr	r2, [r3, #32]
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	0a5b      	lsrs	r3, r3, #9
 8000714:	4413      	add	r3, r2
 8000716:	4619      	mov	r1, r3
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fdd9 	bl	80002d0 <move_window>
 800071e:	4603      	mov	r3, r0
 8000720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 808f 	bne.w	8000848 <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <put_fat+0xe8>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	e00e      	b.n	8000768 <put_fat+0x106>
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	f023 030f 	bic.w	r3, r3, #15
 8000754:	b25a      	sxtb	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b25b      	sxtb	r3, r3
 800075c:	f003 030f 	and.w	r3, r3, #15
 8000760:	b25b      	sxtb	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b25b      	sxtb	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	7013      	strb	r3, [r2, #0]
			break;
 800076c:	e071      	b.n	8000852 <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6a1a      	ldr	r2, [r3, #32]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	4413      	add	r3, r2
 8000778:	4619      	mov	r1, r3
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fda8 	bl	80002d0 <move_window>
 8000780:	4603      	mov	r3, r0
 8000782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000784:	7ffb      	ldrb	r3, [r7, #31]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d160      	bne.n	800084c <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000792:	3330      	adds	r3, #48	; 0x30
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	b292      	uxth	r2, r2
 80007aa:	0a12      	lsrs	r2, r2, #8
 80007ac:	b292      	uxth	r2, r2
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	701a      	strb	r2, [r3, #0]
			break;
 80007b2:	e04e      	b.n	8000852 <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6a1a      	ldr	r2, [r3, #32]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	09db      	lsrs	r3, r3, #7
 80007bc:	4413      	add	r3, r2
 80007be:	4619      	mov	r1, r3
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f7ff fd85 	bl	80002d0 <move_window>
 80007c6:	4603      	mov	r3, r0
 80007c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d13f      	bne.n	8000850 <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3303      	adds	r3, #3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	061a      	lsls	r2, r3, #24
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3302      	adds	r3, #2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	4313      	orrs	r3, r2
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	3201      	adds	r2, #1
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	0212      	lsls	r2, r2, #8
 80007fa:	4313      	orrs	r3, r2
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	4313      	orrs	r3, r2
 8000802:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	b292      	uxth	r2, r2
 800081c:	0a12      	lsrs	r2, r2, #8
 800081e:	b292      	uxth	r2, r2
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3302      	adds	r3, #2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0c12      	lsrs	r2, r2, #16
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3303      	adds	r3, #3
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	0e12      	lsrs	r2, r2, #24
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	701a      	strb	r2, [r3, #0]
			break;
 800083c:	e009      	b.n	8000852 <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
 800083e:	2302      	movs	r3, #2
 8000840:	77fb      	strb	r3, [r7, #31]
 8000842:	e006      	b.n	8000852 <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000844:	bf00      	nop
 8000846:	e004      	b.n	8000852 <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000848:	bf00      	nop
 800084a:	e002      	b.n	8000852 <put_fat+0x1f0>
			if (res != FR_OK) break;
 800084c:	bf00      	nop
 800084e:	e000      	b.n	8000852 <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000850:	bf00      	nop
		}
		fs->wflag = 1;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2201      	movs	r2, #1
 8000856:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8000858:	7ffb      	ldrb	r3, [r7, #31]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d904      	bls.n	800087c <remove_chain+0x1a>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	699a      	ldr	r2, [r3, #24]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d802      	bhi.n	8000882 <remove_chain+0x20>
		res = FR_INT_ERR;
 800087c:	2302      	movs	r3, #2
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e039      	b.n	80008f6 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8000886:	e02d      	b.n	80008e4 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe3a 	bl	8000504 <get_fat>
 8000890:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d02b      	beq.n	80008f0 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d102      	bne.n	80008a4 <remove_chain+0x42>
 800089e:	2302      	movs	r3, #2
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e028      	b.n	80008f6 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008aa:	d102      	bne.n	80008b2 <remove_chain+0x50>
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e021      	b.n	80008f6 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80008b2:	2200      	movs	r2, #0
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fed3 	bl	8000662 <put_fat>
 80008bc:	4603      	mov	r3, r0
 80008be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d116      	bne.n	80008f4 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008ce:	d007      	beq.n	80008e0 <remove_chain+0x7e>
				fs->free_clust++;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2201      	movs	r2, #1
 80008de:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	699a      	ldr	r2, [r3, #24]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d8cc      	bhi.n	8000888 <remove_chain+0x26>
 80008ee:	e002      	b.n	80008f6 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 80008f0:	bf00      	nop
 80008f2:	e000      	b.n	80008f6 <remove_chain+0x94>
			if (res != FR_OK) break;
 80008f4:	bf00      	nop
		}
	}

	return res;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10d      	bne.n	800092c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d004      	beq.n	8000926 <create_chain+0x26>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	699a      	ldr	r2, [r3, #24]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	429a      	cmp	r2, r3
 8000924:	d815      	bhi.n	8000952 <create_chain+0x52>
 8000926:	2301      	movs	r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	e012      	b.n	8000952 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fde8 	bl	8000504 <get_fat>
 8000934:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d801      	bhi.n	8000940 <create_chain+0x40>
 800093c:	2301      	movs	r3, #1
 800093e:	e064      	b.n	8000a0a <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	699a      	ldr	r2, [r3, #24]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	429a      	cmp	r2, r3
 8000948:	d901      	bls.n	800094e <create_chain+0x4e>
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	e05d      	b.n	8000a0a <create_chain+0x10a>
		scl = clst;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	699a      	ldr	r2, [r3, #24]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	429a      	cmp	r2, r3
 8000964:	d807      	bhi.n	8000976 <create_chain+0x76>
			ncl = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	429a      	cmp	r2, r3
 8000970:	d901      	bls.n	8000976 <create_chain+0x76>
 8000972:	2300      	movs	r3, #0
 8000974:	e049      	b.n	8000a0a <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8000976:	6979      	ldr	r1, [r7, #20]
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fdc3 	bl	8000504 <get_fat>
 800097e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00e      	beq.n	80009a4 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800098c:	d002      	beq.n	8000994 <create_chain+0x94>
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d101      	bne.n	8000998 <create_chain+0x98>
			return cs;
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	e038      	b.n	8000a0a <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d1da      	bne.n	8000956 <create_chain+0x56>
 80009a0:	2300      	movs	r3, #0
 80009a2:	e032      	b.n	8000a0a <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 80009a4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80009a6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80009aa:	6979      	ldr	r1, [r7, #20]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fe58 	bl	8000662 <put_fat>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d109      	bne.n	80009d0 <create_chain+0xd0>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe4b 	bl	8000662 <put_fat>
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d110      	bne.n	80009f8 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009e4:	d010      	beq.n	8000a08 <create_chain+0x108>
			fs->free_clust--;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	715a      	strb	r2, [r3, #5]
 80009f6:	e007      	b.n	8000a08 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d102      	bne.n	8000a04 <create_chain+0x104>
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a02:	e000      	b.n	8000a06 <create_chain+0x106>
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8000a08:	697b      	ldr	r3, [r7, #20]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	887a      	ldrh	r2, [r7, #2]
 8000a22:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d005      	beq.n	8000a3c <dir_sdi+0x2a>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	699a      	ldr	r2, [r3, #24]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d801      	bhi.n	8000a40 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e066      	b.n	8000b0e <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d108      	bne.n	8000a58 <dir_sdi+0x46>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d103      	bne.n	8000a58 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d114      	bne.n	8000a88 <dir_sdi+0x76>
		dj->clust = clst;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	891b      	ldrh	r3, [r3, #8]
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d301      	bcc.n	8000a74 <dir_sdi+0x62>
			return FR_INT_ERR;
 8000a70:	2302      	movs	r3, #2
 8000a72:	e04c      	b.n	8000b0e <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	887a      	ldrh	r2, [r7, #2]
 8000a7c:	0912      	lsrs	r2, r2, #4
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	441a      	add	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	e036      	b.n	8000af6 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8000a94:	e01b      	b.n	8000ace <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68f9      	ldr	r1, [r7, #12]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd31 	bl	8000504 <get_fat>
 8000aa2:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aaa:	d101      	bne.n	8000ab0 <dir_sdi+0x9e>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e02e      	b.n	8000b0e <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d905      	bls.n	8000ac2 <dir_sdi+0xb0>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d801      	bhi.n	8000ac6 <dir_sdi+0xb4>
				return FR_INT_ERR;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e023      	b.n	8000b0e <dir_sdi+0xfc>
			idx -= ic;
 8000ac6:	887a      	ldrh	r2, [r7, #2]
 8000ac8:	897b      	ldrh	r3, [r7, #10]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	897b      	ldrh	r3, [r7, #10]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d2df      	bcs.n	8000a96 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68f9      	ldr	r1, [r7, #12]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fcef 	bl	80004c6 <clust2sect>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	091b      	lsrs	r3, r3, #4
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	441a      	add	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	015b      	lsls	r3, r3, #5
 8000b06:	441a      	add	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8000b16:	b590      	push	{r4, r7, lr}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	88db      	ldrh	r3, [r3, #6]
 8000b24:	3301      	adds	r3, #1
 8000b26:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8000b28:	893b      	ldrh	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <dir_next+0x20>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <dir_next+0x24>
		return FR_NO_FILE;
 8000b36:	2304      	movs	r3, #4
 8000b38:	e0bd      	b.n	8000cb6 <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	f003 030f 	and.w	r3, r3, #15
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f040 80a8 	bne.w	8000c98 <dir_next+0x182>
		dj->sect++;					/* Next sector */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d108      	bne.n	8000b6c <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	891b      	ldrh	r3, [r3, #8]
 8000b60:	893a      	ldrh	r2, [r7, #8]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	f0c0 8098 	bcc.w	8000c98 <dir_next+0x182>
				return FR_NO_FILE;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e0a4      	b.n	8000cb6 <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8000b6c:	893b      	ldrh	r3, [r7, #8]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 808a 	bne.w	8000c98 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4610      	mov	r0, r2
 8000b90:	f7ff fcb8 	bl	8000504 <get_fat>
 8000b94:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d801      	bhi.n	8000ba0 <dir_next+0x8a>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e08a      	b.n	8000cb6 <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba6:	d101      	bne.n	8000bac <dir_next+0x96>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e084      	b.n	8000cb6 <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	699a      	ldr	r2, [r3, #24]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d863      	bhi.n	8000c80 <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <dir_next+0xac>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	e079      	b.n	8000cb6 <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4610      	mov	r0, r2
 8000bce:	f7ff fe97 	bl	8000900 <create_chain>
 8000bd2:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <dir_next+0xc8>
 8000bda:	2307      	movs	r3, #7
 8000bdc:	e06b      	b.n	8000cb6 <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <dir_next+0xd2>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e066      	b.n	8000cb6 <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bee:	d101      	bne.n	8000bf4 <dir_next+0xde>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e060      	b.n	8000cb6 <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fb68 	bl	80002d0 <move_window>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <dir_next+0xf4>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e055      	b.n	8000cb6 <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3330      	adds	r3, #48	; 0x30
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fafe 	bl	8000218 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681c      	ldr	r4, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc4d 	bl	80004c6 <clust2sect>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000c30:	2300      	movs	r3, #0
 8000c32:	72fb      	strb	r3, [r7, #11]
 8000c34:	e016      	b.n	8000c64 <dir_next+0x14e>
						dj->fs->wflag = 1;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fb43 	bl	80002d0 <move_window>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <dir_next+0x13e>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e030      	b.n	8000cb6 <dir_next+0x1a0>
						dj->fs->winsect++;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c5a:	3201      	adds	r2, #1
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	3301      	adds	r3, #1
 8000c62:	72fb      	strb	r3, [r7, #11]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	7afa      	ldrb	r2, [r7, #11]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3e2      	bcc.n	8000c36 <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000c7a:	7afa      	ldrb	r2, [r7, #11]
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc1a 	bl	80004c6 <clust2sect>
 8000c92:	4602      	mov	r2, r0
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	893a      	ldrh	r2, [r7, #8]
 8000c9c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000ca6:	893b      	ldrh	r3, [r7, #8]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	015b      	lsls	r3, r3, #5
 8000cae:	441a      	add	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}

08000cbe <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fea2 	bl	8000a12 <dir_sdi>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <dir_find+0x1e>
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	e037      	b.n	8000d4c <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	f7ff faf2 	bl	80002d0 <move_window>
 8000cec:	4603      	mov	r3, r0
 8000cee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d126      	bne.n	8000d44 <dir_find+0x86>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <dir_find+0x50>
 8000d08:	2304      	movs	r3, #4
 8000d0a:	75fb      	strb	r3, [r7, #23]
 8000d0c:	e01d      	b.n	8000d4a <dir_find+0x8c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	330b      	adds	r3, #11
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <dir_find+0x72>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	220b      	movs	r2, #11
 8000d22:	4619      	mov	r1, r3
 8000d24:	6938      	ldr	r0, [r7, #16]
 8000d26:	f7ff fa91 	bl	800024c <mem_cmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00b      	beq.n	8000d48 <dir_find+0x8a>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8000d30:	2100      	movs	r1, #0
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff feef 	bl	8000b16 <dir_next>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0cc      	beq.n	8000cdc <dir_find+0x1e>
 8000d42:	e002      	b.n	8000d4a <dir_find+0x8c>
		if (res != FR_OK) break;
 8000d44:	bf00      	nop
 8000d46:	e000      	b.n	8000d4a <dir_find+0x8c>
			break;
 8000d48:	bf00      	nop

	return res;
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fe57 	bl	8000a12 <dir_sdi>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d121      	bne.n	8000db2 <dir_register+0x5e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4610      	mov	r0, r2
 8000d7a:	f7ff faa9 	bl	80002d0 <move_window>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d113      	bne.n	8000db0 <dir_register+0x5c>
			c = *dj->dir;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	2be5      	cmp	r3, #229	; 0xe5
 8000d94:	d00d      	beq.n	8000db2 <dir_register+0x5e>
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00a      	beq.n	8000db2 <dir_register+0x5e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff feb9 	bl	8000b16 <dir_next>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0df      	beq.n	8000d6e <dir_register+0x1a>
 8000dae:	e000      	b.n	8000db2 <dir_register+0x5e>
			if (res != FR_OK) break;
 8000db0:	bf00      	nop
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11f      	bne.n	8000df8 <dir_register+0xa4>
		res = move_window(dj->fs, dj->sect);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	f7ff fa84 	bl	80002d0 <move_window>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d112      	bne.n	8000df8 <dir_register+0xa4>
			dir = dj->dir;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8000dd8:	2220      	movs	r2, #32
 8000dda:	2100      	movs	r1, #0
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f7ff fa1b 	bl	8000218 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	220b      	movs	r2, #11
 8000de8:	4619      	mov	r1, r3
 8000dea:	68b8      	ldr	r0, [r7, #8]
 8000dec:	f7ff f9f6 	bl	80001dc <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2201      	movs	r2, #1
 8000df6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 8000e14:	220b      	movs	r2, #11
 8000e16:	2120      	movs	r1, #32
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff f9fd 	bl	8000218 <mem_set>
	si = i = b = 0; ni = 8;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	77fb      	strb	r3, [r7, #31]
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	61bb      	str	r3, [r7, #24]
	p = *path;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60bb      	str	r3, [r7, #8]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	617a      	str	r2, [r7, #20]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8000e42:	7fbb      	ldrb	r3, [r7, #30]
 8000e44:	2b20      	cmp	r3, #32
 8000e46:	d953      	bls.n	8000ef0 <create_name+0xec>
 8000e48:	7fbb      	ldrb	r3, [r7, #30]
 8000e4a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e4c:	d050      	beq.n	8000ef0 <create_name+0xec>
 8000e4e:	7fbb      	ldrb	r3, [r7, #30]
 8000e50:	2b5c      	cmp	r3, #92	; 0x5c
 8000e52:	d04d      	beq.n	8000ef0 <create_name+0xec>
		if (c == '.' || i >= ni) {
 8000e54:	7fbb      	ldrb	r3, [r7, #30]
 8000e56:	2b2e      	cmp	r3, #46	; 0x2e
 8000e58:	d003      	beq.n	8000e62 <create_name+0x5e>
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d30f      	bcc.n	8000e82 <create_name+0x7e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d102      	bne.n	8000e6e <create_name+0x6a>
 8000e68:	7fbb      	ldrb	r3, [r7, #30]
 8000e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8000e6c:	d001      	beq.n	8000e72 <create_name+0x6e>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e073      	b.n	8000f5a <create_name+0x156>
			i = 8; ni = 11;
 8000e72:	2308      	movs	r3, #8
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	230b      	movs	r3, #11
 8000e78:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8000e7a:	7ffb      	ldrb	r3, [r7, #31]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	77fb      	strb	r3, [r7, #31]
 8000e80:	e035      	b.n	8000eee <create_name+0xea>
		}
		if (c >= 0x80) {				/* Extended char? */
 8000e82:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da08      	bge.n	8000e9c <create_name+0x98>
			b |= 3;						/* Eliminate NT flag */
 8000e8a:	7ffb      	ldrb	r3, [r7, #31]
 8000e8c:	f043 0303 	orr.w	r3, r3, #3
 8000e90:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 8000e92:	7fbb      	ldrb	r3, [r7, #30]
 8000e94:	3b80      	subs	r3, #128	; 0x80
 8000e96:	4a33      	ldr	r2, [pc, #204]	; (8000f64 <create_name+0x160>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8000e9c:	7fbb      	ldrb	r3, [r7, #30]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4831      	ldr	r0, [pc, #196]	; (8000f68 <create_name+0x164>)
 8000ea2:	f7ff f9fa 	bl	800029a <chk_chr>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <create_name+0xac>
				return FR_INVALID_NAME;
 8000eac:	2306      	movs	r3, #6
 8000eae:	e054      	b.n	8000f5a <create_name+0x156>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8000eb0:	7fbb      	ldrb	r3, [r7, #30]
 8000eb2:	2b40      	cmp	r3, #64	; 0x40
 8000eb4:	d907      	bls.n	8000ec6 <create_name+0xc2>
 8000eb6:	7fbb      	ldrb	r3, [r7, #30]
 8000eb8:	2b5a      	cmp	r3, #90	; 0x5a
 8000eba:	d804      	bhi.n	8000ec6 <create_name+0xc2>
				b |= 2;
 8000ebc:	7ffb      	ldrb	r3, [r7, #31]
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	77fb      	strb	r3, [r7, #31]
 8000ec4:	e00c      	b.n	8000ee0 <create_name+0xdc>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8000ec6:	7fbb      	ldrb	r3, [r7, #30]
 8000ec8:	2b60      	cmp	r3, #96	; 0x60
 8000eca:	d909      	bls.n	8000ee0 <create_name+0xdc>
 8000ecc:	7fbb      	ldrb	r3, [r7, #30]
 8000ece:	2b7a      	cmp	r3, #122	; 0x7a
 8000ed0:	d806      	bhi.n	8000ee0 <create_name+0xdc>
					b |= 1; c -= 0x20;
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	77fb      	strb	r3, [r7, #31]
 8000eda:	7fbb      	ldrb	r3, [r7, #30]
 8000edc:	3b20      	subs	r3, #32
 8000ede:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	613a      	str	r2, [r7, #16]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	7fba      	ldrb	r2, [r7, #30]
 8000eec:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8000eee:	e7a1      	b.n	8000e34 <create_name+0x30>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8000efa:	7fbb      	ldrb	r3, [r7, #30]
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d801      	bhi.n	8000f04 <create_name+0x100>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e000      	b.n	8000f06 <create_name+0x102>
 8000f04:	2300      	movs	r3, #0
 8000f06:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <create_name+0x10e>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e023      	b.n	8000f5a <create_name+0x156>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2be5      	cmp	r3, #229	; 0xe5
 8000f18:	d102      	bne.n	8000f20 <create_name+0x11c>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d102      	bne.n	8000f2c <create_name+0x128>
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8000f2c:	7ffb      	ldrb	r3, [r7, #31]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d103      	bne.n	8000f3e <create_name+0x13a>
 8000f36:	7fbb      	ldrb	r3, [r7, #30]
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d103      	bne.n	8000f50 <create_name+0x14c>
 8000f48:	7fbb      	ldrb	r3, [r7, #30]
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	77bb      	strb	r3, [r7, #30]

	sfn[NS] = c;		/* Store NT flag, File name is created */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	330b      	adds	r3, #11
 8000f54:	7fba      	ldrb	r2, [r7, #30]
 8000f56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8000f58:	2300      	movs	r3, #0
#endif
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08002e88 	.word	0x08002e88
 8000f68:	08002e70 	.word	0x08002e70

08000f6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f7c:	d003      	beq.n	8000f86 <follow_path+0x1a>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b5c      	cmp	r3, #92	; 0x5c
 8000f84:	d102      	bne.n	8000f8c <follow_path+0x20>
		path++;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b1f      	cmp	r3, #31
 8000f98:	d809      	bhi.n	8000fae <follow_path+0x42>
		res = dir_sdi(dj, 0);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fd38 	bl	8000a12 <dir_sdi>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	e056      	b.n	800105c <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff26 	bl	8000e04 <create_name>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d145      	bne.n	800104e <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fe7b 	bl	8000cbe <dir_find>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00a      	beq.n	8000ff0 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d138      	bne.n	8001052 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d135      	bne.n	8001056 <follow_path+0xea>
 8000fea:	2305      	movs	r3, #5
 8000fec:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fee:	e032      	b.n	8001056 <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d12f      	bne.n	800105a <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	330b      	adds	r3, #11
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800100e:	2305      	movs	r3, #5
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e023      	b.n	800105c <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	3315      	adds	r3, #21
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3314      	adds	r3, #20
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	321b      	adds	r2, #27
 8001032:	7812      	ldrb	r2, [r2, #0]
 8001034:	0212      	lsls	r2, r2, #8
 8001036:	b211      	sxth	r1, r2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	321a      	adds	r2, #26
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	b212      	sxth	r2, r2
 8001040:	430a      	orrs	r2, r1
 8001042:	b212      	sxth	r2, r2
 8001044:	b292      	uxth	r2, r2
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 800104c:	e7af      	b.n	8000fae <follow_path+0x42>
			if (res != FR_OK) break;
 800104e:	bf00      	nop
 8001050:	e004      	b.n	800105c <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 8001052:	bf00      	nop
 8001054:	e002      	b.n	800105c <follow_path+0xf0>
				break;
 8001056:	bf00      	nop
 8001058:	e000      	b.n	800105c <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 800105a:	bf00      	nop
		}
	}

	return res;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7858      	ldrb	r0, [r3, #1]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800107c:	2301      	movs	r3, #1
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	f001 f990 	bl	80023a4 <disk_read>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <check_fs+0x26>
		return 3;
 800108a:	2303      	movs	r3, #3
 800108c:	e04a      	b.n	8001124 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f203 232e 	addw	r3, r3, #558	; 0x22e
 8001094:	3301      	adds	r3, #1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <check_fs+0xc4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d001      	beq.n	80010b2 <check_fs+0x4a>
		return 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	e038      	b.n	8001124 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3366      	adds	r3, #102	; 0x66
 80010b6:	3303      	adds	r3, #3
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	061a      	lsls	r2, r3, #24
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3366      	adds	r3, #102	; 0x66
 80010c0:	3302      	adds	r3, #2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	4313      	orrs	r3, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	3266      	adds	r2, #102	; 0x66
 80010cc:	3201      	adds	r2, #1
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	0212      	lsls	r2, r2, #8
 80010d2:	4313      	orrs	r3, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80010da:	4313      	orrs	r3, r2
 80010dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <check_fs+0xc8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <check_fs+0x82>
		return 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e01c      	b.n	8001124 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3382      	adds	r3, #130	; 0x82
 80010ee:	3303      	adds	r3, #3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	061a      	lsls	r2, r3, #24
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3382      	adds	r3, #130	; 0x82
 80010f8:	3302      	adds	r3, #2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	041b      	lsls	r3, r3, #16
 80010fe:	4313      	orrs	r3, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	3282      	adds	r2, #130	; 0x82
 8001104:	3201      	adds	r2, #1
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	0212      	lsls	r2, r2, #8
 800110a:	4313      	orrs	r3, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 8001112:	4313      	orrs	r3, r2
 8001114:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <check_fs+0xc8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <check_fs+0xba>
		return 0;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <check_fs+0xbc>

	return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	ffffaa55 	.word	0xffffaa55
 8001130:	00544146 	.word	0x00544146

08001134 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b092      	sub	sp, #72	; 0x48
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3b30      	subs	r3, #48	; 0x30
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8001150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001152:	2b09      	cmp	r3, #9
 8001154:	d80b      	bhi.n	800116e <chk_mounted+0x3a>
 8001156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001158:	3301      	adds	r3, #1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b3a      	cmp	r3, #58	; 0x3a
 800115e:	d106      	bne.n	800116e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	3302      	adds	r3, #2
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e001      	b.n	8001172 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
 800116e:	2300      	movs	r3, #0
 8001170:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8001172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
 8001178:	230b      	movs	r3, #11
 800117a:	e25f      	b.n	800163c <chk_mounted+0x508>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 800117c:	4aa6      	ldr	r2, [pc, #664]	; (8001418 <chk_mounted+0x2e4>)
 800117e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800118a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <chk_mounted+0x62>
 8001192:	230c      	movs	r3, #12
 8001194:	e252      	b.n	800163c <chk_mounted+0x508>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d01a      	beq.n	80011d4 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f8e8 	bl	8002378 <disk_status>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <chk_mounted+0xa0>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <chk_mounted+0x9c>
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
 80011cc:	230a      	movs	r3, #10
 80011ce:	e235      	b.n	800163c <chk_mounted+0x508>
#endif
			return FR_OK;				/* The file system object is valid */
 80011d0:	2300      	movs	r3, #0
 80011d2:	e233      	b.n	800163c <chk_mounted+0x508>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 80011da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 ffa8 	bl	800213c <disk_initialize>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80011f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 80011fe:	2303      	movs	r3, #3
 8001200:	e21c      	b.n	800163c <chk_mounted+0x508>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <chk_mounted+0xe4>
 8001208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
 8001214:	230a      	movs	r3, #10
 8001216:	e211      	b.n	800163c <chk_mounted+0x508>
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 8001218:	2300      	movs	r3, #0
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800121c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800121e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001220:	f7ff ff22 	bl	8001068 <check_fs>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 800122a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800122e:	2b01      	cmp	r3, #1
 8001230:	d122      	bne.n	8001278 <chk_mounted+0x144>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8001238:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {									/* Is the partition existing? */
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	3304      	adds	r3, #4
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d019      	beq.n	8001278 <chk_mounted+0x144>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	330b      	adds	r3, #11
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	061a      	lsls	r2, r3, #24
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	330a      	adds	r3, #10
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	4313      	orrs	r3, r2
 8001256:	6a3a      	ldr	r2, [r7, #32]
 8001258:	3209      	adds	r2, #9
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	0212      	lsls	r2, r2, #8
 800125e:	4313      	orrs	r3, r2
 8001260:	6a3a      	ldr	r2, [r7, #32]
 8001262:	3208      	adds	r2, #8
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	4313      	orrs	r3, r2
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);					/* Check the partition */
 800126a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126e:	f7ff fefb 	bl	8001068 <check_fs>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8001278:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800127c:	2b03      	cmp	r3, #3
 800127e:	d101      	bne.n	8001284 <chk_mounted+0x150>
 8001280:	2301      	movs	r3, #1
 8001282:	e1db      	b.n	800163c <chk_mounted+0x508>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 8001284:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <chk_mounted+0x15c>
 800128c:	230d      	movs	r3, #13
 800128e:	e1d5      	b.n	800163c <chk_mounted+0x508>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012aa:	d001      	beq.n	80012b0 <chk_mounted+0x17c>
		return FR_NO_FILESYSTEM;
 80012ac:	230d      	movs	r3, #13
 80012ae:	e1c5      	b.n	800163c <chk_mounted+0x508>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d112      	bne.n	80012f6 <chk_mounted+0x1c2>
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80012d6:	061a      	lsls	r2, r3, #24
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	4313      	orrs	r3, r2
 80012e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012e4:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80012e8:	0212      	lsls	r2, r2, #8
 80012ea:	4313      	orrs	r3, r2
 80012ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80012f2:	4313      	orrs	r3, r2
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012fa:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001302:	77fb      	strb	r3, [r7, #31]
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	7ffa      	ldrb	r2, [r7, #31]
 8001308:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d004      	beq.n	800131a <chk_mounted+0x1e6>
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d001      	beq.n	800131a <chk_mounted+0x1e6>
 8001316:	230d      	movs	r3, #13
 8001318:	e190      	b.n	800163c <chk_mounted+0x508>
	fasize *= b;										/* Number of sectors for FAT area */
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800132a:	77fb      	strb	r3, [r7, #31]
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	7ffa      	ldrb	r2, [r7, #31]
 8001330:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <chk_mounted+0x210>
 8001338:	7ffa      	ldrb	r2, [r7, #31]
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	3b01      	subs	r3, #1
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <chk_mounted+0x214>
 8001344:	230d      	movs	r3, #13
 8001346:	e179      	b.n	800163c <chk_mounted+0x508>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21b      	sxth	r3, r3
 800135e:	b29a      	uxth	r2, r3
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	891b      	ldrh	r3, [r3, #8]
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	b29b      	uxth	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <chk_mounted+0x242>
 8001372:	230d      	movs	r3, #13
 8001374:	e162      	b.n	800163c <chk_mounted+0x508>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29b      	uxth	r3, r3
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	2b00      	cmp	r3, #0
 8001394:	d112      	bne.n	80013bc <chk_mounted+0x288>
 8001396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001398:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800139c:	061a      	lsls	r2, r3, #24
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	4313      	orrs	r3, r2
 80013a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013aa:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 80013ae:	0212      	lsls	r2, r2, #8
 80013b0:	4313      	orrs	r3, r2
 80013b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b4:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80013b8:	4313      	orrs	r3, r2
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 80013d4:	8bbb      	ldrh	r3, [r7, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <chk_mounted+0x2aa>
 80013da:	230d      	movs	r3, #13
 80013dc:	e12e      	b.n	800163c <chk_mounted+0x508>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
 80013de:	8bba      	ldrh	r2, [r7, #28]
 80013e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e2:	4413      	add	r3, r2
 80013e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e6:	8912      	ldrh	r2, [r2, #8]
 80013e8:	0912      	lsrs	r2, r2, #4
 80013ea:	b292      	uxth	r2, r2
 80013ec:	4413      	add	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80013f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d201      	bcs.n	80013fc <chk_mounted+0x2c8>
 80013f8:	230d      	movs	r3, #13
 80013fa:	e11f      	b.n	800163c <chk_mounted+0x508>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80013fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001404:	7892      	ldrb	r2, [r2, #2]
 8001406:	fbb3 f3f2 	udiv	r3, r3, r2
 800140a:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d104      	bne.n	800141c <chk_mounted+0x2e8>
 8001412:	230d      	movs	r3, #13
 8001414:	e112      	b.n	800163c <chk_mounted+0x508>
 8001416:	bf00      	nop
 8001418:	20000034 	.word	0x20000034
	fmt = FS_FAT12;
 800141c:	2301      	movs	r3, #1
 800141e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f640 72f5 	movw	r2, #4085	; 0xff5
 8001428:	4293      	cmp	r3, r2
 800142a:	d902      	bls.n	8001432 <chk_mounted+0x2fe>
 800142c:	2302      	movs	r3, #2
 800142e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8001438:	4293      	cmp	r3, r2
 800143a:	d902      	bls.n	8001442 <chk_mounted+0x30e>
 800143c:	2303      	movs	r3, #3
 800143e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1c9a      	adds	r2, r3, #2
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 800144a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	441a      	add	r2, r3
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8001454:	8bba      	ldrh	r2, [r7, #28]
 8001456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001458:	441a      	add	r2, r3
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
 800145e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001462:	2b03      	cmp	r3, #3
 8001464:	d11e      	bne.n	80014a4 <chk_mounted+0x370>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	891b      	ldrh	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <chk_mounted+0x33e>
 800146e:	230d      	movs	r3, #13
 8001470:	e0e4      	b.n	800163c <chk_mounted+0x508>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001478:	061a      	lsls	r2, r3, #24
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	4313      	orrs	r3, r2
 8001484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001486:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	4313      	orrs	r3, r2
 800148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001490:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8001494:	431a      	orrs	r2, r3
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
 80014a2:	e01f      	b.n	80014e4 <chk_mounted+0x3b0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	891b      	ldrh	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <chk_mounted+0x37c>
 80014ac:	230d      	movs	r3, #13
 80014ae:	e0c5      	b.n	800163c <chk_mounted+0x508>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	441a      	add	r2, r3
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80014bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d103      	bne.n	80014cc <chk_mounted+0x398>
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	e00a      	b.n	80014e2 <chk_mounted+0x3ae>
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	085a      	lsrs	r2, r3, #1
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014ee:	0a5b      	lsrs	r3, r3, #9
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d201      	bcs.n	80014f8 <chk_mounted+0x3c4>
		return FR_NO_FILESYSTEM;
 80014f4:	230d      	movs	r3, #13
 80014f6:	e0a1      	b.n	800163c <chk_mounted+0x508>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014fe:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 8001506:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800150a:	2b03      	cmp	r3, #3
 800150c:	f040 8081 	bne.w	8001612 <chk_mounted+0x4de>
	 	fs->fsi_flag = 0;
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21b      	sxth	r3, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001532:	441a      	add	r2, r3
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	7858      	ldrb	r0, [r3, #1]
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	2301      	movs	r3, #1
 8001548:	f000 ff2c 	bl	80023a4 <disk_read>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d15f      	bne.n	8001612 <chk_mounted+0x4de>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001568:	4a36      	ldr	r2, [pc, #216]	; (8001644 <chk_mounted+0x510>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d151      	bne.n	8001612 <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001574:	061a      	lsls	r2, r3, #24
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	4313      	orrs	r3, r2
 8001580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001582:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8001586:	0212      	lsls	r2, r2, #8
 8001588:	4313      	orrs	r3, r2
 800158a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800158c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001590:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001592:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <chk_mounted+0x514>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d13c      	bne.n	8001612 <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800159e:	061a      	lsls	r2, r3, #24
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	4313      	orrs	r3, r2
 80015aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ac:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
 80015b0:	0212      	lsls	r2, r2, #8
 80015b2:	4313      	orrs	r3, r2
 80015b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b6:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
 80015ba:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80015bc:	4a23      	ldr	r2, [pc, #140]	; (800164c <chk_mounted+0x518>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d127      	bne.n	8001612 <chk_mounted+0x4de>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	4313      	orrs	r3, r2
 80015d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d6:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 80015da:	0212      	lsls	r2, r2, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e0:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 80015e4:	431a      	orrs	r2, r3
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80015f0:	061a      	lsls	r2, r3, #24
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4313      	orrs	r3, r2
 80015fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fe:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 8001602:	0212      	lsls	r2, r2, #8
 8001604:	4313      	orrs	r3, r2
 8001606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001608:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 800160c:	431a      	orrs	r2, r3
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001618:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <chk_mounted+0x51c>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <chk_mounted+0x51c>)
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <chk_mounted+0x51c>)
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	2200      	movs	r2, #0
 8001638:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3748      	adds	r7, #72	; 0x48
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	ffffaa55 	.word	0xffffaa55
 8001648:	41615252 	.word	0x41615252
 800164c:	61417272 	.word	0x61417272
 8001650:	20000038 	.word	0x20000038

08001654 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <validate+0x24>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <validate+0x24>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	88db      	ldrh	r3, [r3, #6]
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <validate+0x28>
		return FR_INVALID_OBJECT;
 8001678:	2309      	movs	r3, #9
 800167a:	e00c      	b.n	8001696 <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	785b      	ldrb	r3, [r3, #1]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fe79 	bl	8002378 <disk_status>
 8001686:	4603      	mov	r3, r0
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <validate+0x40>
		return FR_NOT_READY;
 8001690:	2303      	movs	r3, #3
 8001692:	e000      	b.n	8001696 <validate+0x42>

	return FR_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80016b2:	230b      	movs	r3, #11
 80016b4:	e016      	b.n	80016e4 <f_mount+0x44>
	rfs = FatFs[vol];				/* Get current fs object */
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <f_mount+0x50>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <f_mount+0x38>
		fs->fs_type = 0;			/* Clear new fs object */
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4905      	ldr	r1, [pc, #20]	; (80016f0 <f_mount+0x50>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000034 	.word	0x20000034

080016f4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b092      	sub	sp, #72	; 0x48
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	f107 011c 	add.w	r1, r7, #28
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fd07 	bl	8001134 <chk_mounted>
 8001726:	4603      	mov	r3, r0
 8001728:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
	if (res == FR_OK)
 8001732:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fc12 	bl	8000f6c <follow_path>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	dir = dj.dir;
 800174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001750:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
 8001752:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <f_open+0x72>
		if (!dir)	/* Current dir itself */
 800175a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <f_open+0x72>
			res = FR_INVALID_NAME;
 8001760:	2306      	movs	r3, #6
 8001762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 031c 	and.w	r3, r3, #28
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80b2 	beq.w	80018d6 <f_open+0x1e2>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
 8001772:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <f_open+0xac>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800177a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800177e:	2b04      	cmp	r3, #4
 8001780:	d107      	bne.n	8001792 <f_open+0x9e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fae4 	bl	8000d54 <dir_register>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;					/* New entry */
 800179a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179c:	643b      	str	r3, [r7, #64]	; 0x40
 800179e:	e012      	b.n	80017c6 <f_open+0xd2>
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <f_open+0xbe>
				res = FR_EXIST;
 80017aa:	2308      	movs	r3, #8
 80017ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80017b0:	e009      	b.n	80017c6 <f_open+0xd2>
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
 80017b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b4:	330b      	adds	r3, #11
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f003 0311 	and.w	r3, r3, #17
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <f_open+0xd2>
					res = FR_DENIED;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80017c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80a1 	bne.w	8001912 <f_open+0x21e>
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 809b 	beq.w	8001912 <f_open+0x21e>
			dw = get_fattime();					/* Created time */
 80017dc:	f7fe fcf4 	bl	80001c8 <get_fattime>
 80017e0:	63f8      	str	r0, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
 80017e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e4:	330e      	adds	r3, #14
 80017e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ee:	330f      	adds	r3, #15
 80017f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017f2:	b292      	uxth	r2, r2
 80017f4:	0a12      	lsrs	r2, r2, #8
 80017f6:	b292      	uxth	r2, r2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fe:	3310      	adds	r3, #16
 8001800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001802:	0c12      	lsrs	r2, r2, #16
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180a:	3311      	adds	r3, #17
 800180c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800180e:	0e12      	lsrs	r2, r2, #24
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8001814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001816:	330b      	adds	r3, #11
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 800181c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181e:	331c      	adds	r3, #28
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001826:	331d      	adds	r3, #29
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182e:	331e      	adds	r3, #30
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001836:	331f      	adds	r3, #31
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
 800183c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800183e:	3315      	adds	r3, #21
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001848:	3314      	adds	r3, #20
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21b      	sxth	r3, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001858:	321b      	adds	r2, #27
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	0212      	lsls	r2, r2, #8
 800185e:	b211      	sxth	r1, r2
 8001860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001862:	321a      	adds	r2, #26
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	b212      	sxth	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	b212      	sxth	r2, r2
 800186c:	b292      	uxth	r2, r2
 800186e:	4313      	orrs	r3, r2
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
 8001872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001874:	331a      	adds	r3, #26
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187c:	331b      	adds	r3, #27
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001884:	3314      	adds	r3, #20
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188c:	3315      	adds	r3, #21
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2201      	movs	r2, #1
 8001896:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
 8001898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189a:	2b00      	cmp	r3, #0
 800189c:	d039      	beq.n	8001912 <f_open+0x21e>
				dw = dj.fs->winsect;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe ffda 	bl	8000862 <remove_chain>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res == FR_OK) {
 80018b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12a      	bne.n	8001912 <f_open+0x21e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018c0:	3a01      	subs	r2, #1
 80018c2:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fd01 	bl	80002d0 <move_window>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80018d4:	e01d      	b.n	8001912 <f_open+0x21e>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
 80018d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d119      	bne.n	8001912 <f_open+0x21e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 80018de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e0:	330b      	adds	r3, #11
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <f_open+0x200>
				res = FR_NO_FILE;
 80018ec:	2304      	movs	r3, #4
 80018ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80018f2:	e00e      	b.n	8001912 <f_open+0x21e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <f_open+0x21e>
 80018fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001900:	330b      	adds	r3, #11
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <f_open+0x21e>
					res = FR_DENIED;
 800190c:	2307      	movs	r3, #7
 800190e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
	}
	if (res == FR_OK) {
 8001912:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <f_open+0x246>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <f_open+0x238>
			mode |= FA__WRITTEN;
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	71fb      	strb	r3, [r7, #7]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001938:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
 800193a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800193e:	2b00      	cmp	r3, #0
 8001940:	d13f      	bne.n	80019c2 <f_open+0x2ce>
		fp->flag = mode;					/* File access mode */
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	719a      	strb	r2, [r3, #6]
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
 8001948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194a:	3315      	adds	r3, #21
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001954:	3314      	adds	r3, #20
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b21b      	sxth	r3, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001964:	321b      	adds	r2, #27
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	0212      	lsls	r2, r2, #8
 800196a:	b211      	sxth	r1, r2
 800196c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800196e:	321a      	adds	r2, #26
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	b212      	sxth	r2, r2
 8001974:	430a      	orrs	r2, r1
 8001976:	b212      	sxth	r2, r2
 8001978:	b292      	uxth	r2, r2
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8001980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001982:	331f      	adds	r3, #31
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	061a      	lsls	r2, r3, #24
 8001988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198a:	331e      	adds	r3, #30
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	4313      	orrs	r3, r2
 8001992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001994:	321d      	adds	r2, #29
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	0212      	lsls	r2, r2, #8
 800199a:	4313      	orrs	r3, r2
 800199c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800199e:	321c      	adds	r2, #28
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	88da      	ldrh	r2, [r3, #6]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
 80019c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3748      	adds	r7, #72	; 0x48
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b08c      	sub	sp, #48	; 0x30
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Initialize byte counter */
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7ff fe2f 	bl	8001654 <validate>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80019fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <f_read+0x3c>
 8001a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a08:	e135      	b.n	8001c76 <f_read+0x2a8>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	799b      	ldrb	r3, [r3, #6]
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da01      	bge.n	8001a18 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8001a14:	2302      	movs	r3, #2
 8001a16:	e12e      	b.n	8001c76 <f_read+0x2a8>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	799b      	ldrb	r3, [r3, #6]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8001a24:	2307      	movs	r3, #7
 8001a26:	e126      	b.n	8001c76 <f_read+0x2a8>
	remain = fp->fsize - fp->fptr;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	61fb      	str	r3, [r7, #28]
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f240 8117 	bls.w	8001c6c <f_read+0x29e>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	607b      	str	r3, [r7, #4]

	for ( ;  btr;									/* Repeat until all data transferred */
 8001a42:	e113      	b.n	8001c6c <f_read+0x29e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 80df 	bne.w	8001c10 <f_read+0x242>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	0a5b      	lsrs	r3, r3, #9
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4013      	ands	r3, r2
 8001a66:	76fb      	strb	r3, [r7, #27]
			if (!csect) {							/* On the cluster boundary? */
 8001a68:	7efb      	ldrb	r3, [r7, #27]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d12c      	bne.n	8001ac8 <f_read+0xfa>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <f_read+0xae>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	e008      	b.n	8001a8e <f_read+0xc0>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f7fe fd3c 	bl	8000504 <get_fat>
 8001a8c:	4603      	mov	r3, r0
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8001a8e:	613b      	str	r3, [r7, #16]
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d808      	bhi.n	8001aa8 <f_read+0xda>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	799b      	ldrb	r3, [r3, #6]
 8001a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	719a      	strb	r2, [r3, #6]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e0e6      	b.n	8001c76 <f_read+0x2a8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aae:	d108      	bne.n	8001ac2 <f_read+0xf4>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	799b      	ldrb	r3, [r3, #6]
 8001ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	719a      	strb	r2, [r3, #6]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0d9      	b.n	8001c76 <f_read+0x2a8>
				fp->curr_clust = clst;				/* Update current cluster */
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7fe fcf7 	bl	80004c6 <clust2sect>
 8001ad8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d108      	bne.n	8001af2 <f_read+0x124>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	799b      	ldrb	r3, [r3, #6]
 8001ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	719a      	strb	r2, [r3, #6]
 8001aee:	2302      	movs	r3, #2
 8001af0:	e0c1      	b.n	8001c76 <f_read+0x2a8>
			sect += csect;
 8001af2:	7efb      	ldrb	r3, [r7, #27]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4413      	add	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0a5b      	lsrs	r3, r3, #9
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {								/* Read maximum contiguous sectors directly */
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d042      	beq.n	8001b8c <f_read+0x1be>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
 8001b06:	7efa      	ldrb	r2, [r7, #27]
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	4413      	add	r3, r2
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	7892      	ldrb	r2, [r2, #2]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d906      	bls.n	8001b24 <f_read+0x156>
					cc = fp->fs->csize - csect;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	7efb      	ldrb	r3, [r7, #27]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	7858      	ldrb	r0, [r3, #1]
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b32:	f000 fc37 	bl	80023a4 <disk_read>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <f_read+0x180>
					ABORT(fp->fs, FR_DISK_ERR);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	799b      	ldrb	r3, [r3, #6]
 8001b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	719a      	strb	r2, [r3, #6]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e093      	b.n	8001c76 <f_read+0x2a8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	799b      	ldrb	r3, [r3, #6]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d014      	beq.n	8001b84 <f_read+0x1b6>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d20d      	bcs.n	8001b84 <f_read+0x1b6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	025b      	lsls	r3, r3, #9
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	18d0      	adds	r0, r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3324      	adds	r3, #36	; 0x24
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe fb2c 	bl	80001dc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	025b      	lsls	r3, r3, #9
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8001b8a:	e05b      	b.n	8001c44 <f_read+0x276>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {				/* Write sector I/O buffer if needed */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	799b      	ldrb	r3, [r3, #6]
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01d      	beq.n	8001bd4 <f_read+0x206>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	7858      	ldrb	r0, [r3, #1]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f000 fc7f 	bl	80024ac <disk_write>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <f_read+0x1f8>
					ABORT(fp->fs, FR_DISK_ERR);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	799b      	ldrb	r3, [r3, #6]
 8001bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	719a      	strb	r2, [r3, #6]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e057      	b.n	8001c76 <f_read+0x2a8>
				fp->flag &= ~FA__DIRTY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	799b      	ldrb	r3, [r3, #6]
 8001bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d015      	beq.n	8001c0a <f_read+0x23c>
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	7858      	ldrb	r0, [r3, #1]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001bea:	2301      	movs	r3, #1
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	f000 fbd9 	bl	80023a4 <disk_read>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <f_read+0x23c>
					ABORT(fp->fs, FR_DISK_ERR);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	799b      	ldrb	r3, [r3, #6]
 8001bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	719a      	strb	r2, [r3, #6]
 8001c06:	2301      	movs	r3, #1
 8001c08:	e035      	b.n	8001c76 <f_read+0x2a8>
			}
#endif
			fp->dsect = sect;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;
 8001c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d901      	bls.n	8001c2a <f_read+0x25c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c32:	3320      	adds	r3, #32
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c40:	f7fe facc 	bl	80001dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	4413      	add	r3, r2
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	441a      	add	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5e:	441a      	add	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;									/* Repeat until all data transferred */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f47f aee8 	bne.w	8001a44 <f_read+0x76>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3730      	adds	r7, #48	; 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	889b      	ldrh	r3, [r3, #4]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7ff fcdf 	bl	8001654 <validate>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 80a8 	bne.w	8001df2 <f_sync+0x174>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	799b      	ldrb	r3, [r3, #6]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80a1 	beq.w	8001df2 <f_sync+0x174>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d016      	beq.n	8001cea <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	7858      	ldrb	r0, [r3, #1]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f000 fbed 	bl	80024ac <disk_write>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <f_sync+0x5e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e08b      	b.n	8001df4 <f_sync+0x176>
				fp->flag &= ~FA__DIRTY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	799b      	ldrb	r3, [r3, #6]
 8001ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f7fe faeb 	bl	80002d0 <move_window>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d176      	bne.n	8001df2 <f_sync+0x174>
				dir = fp->dir_ptr;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	330b      	adds	r3, #11
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	320b      	adds	r2, #11
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	331c      	adds	r3, #28
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68d2      	ldr	r2, [r2, #12]
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	331d      	adds	r3, #29
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	b292      	uxth	r2, r2
 8001d32:	0a12      	lsrs	r2, r2, #8
 8001d34:	b292      	uxth	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	331e      	adds	r3, #30
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68d2      	ldr	r2, [r2, #12]
 8001d42:	0c12      	lsrs	r2, r2, #16
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	331f      	adds	r3, #31
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68d2      	ldr	r2, [r2, #12]
 8001d50:	0e12      	lsrs	r2, r2, #24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	331a      	adds	r3, #26
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6912      	ldr	r2, [r2, #16]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	331b      	adds	r3, #27
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6912      	ldr	r2, [r2, #16]
 8001d6a:	b292      	uxth	r2, r2
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	3314      	adds	r3, #20
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6912      	ldr	r2, [r2, #16]
 8001d7c:	0c12      	lsrs	r2, r2, #16
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	3315      	adds	r3, #21
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6912      	ldr	r2, [r2, #16]
 8001d8a:	0c12      	lsrs	r2, r2, #16
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	0a12      	lsrs	r2, r2, #8
 8001d90:	b292      	uxth	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
 8001d96:	f7fe fa17 	bl	80001c8 <get_fattime>
 8001d9a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	3316      	adds	r3, #22
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	3317      	adds	r3, #23
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	b292      	uxth	r2, r2
 8001dae:	0a12      	lsrs	r2, r2, #8
 8001db0:	b292      	uxth	r2, r2
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	3318      	adds	r3, #24
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	0c12      	lsrs	r2, r2, #16
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	3319      	adds	r3, #25
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	0e12      	lsrs	r2, r2, #24
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	799b      	ldrb	r3, [r3, #6]
 8001dd2:	f023 0320 	bic.w	r3, r3, #32
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe facb 	bl	8000384 <sync>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff3a 	bl	8001c7e <f_sync>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <f_close+0x1e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
	return res;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZL6SELECTv>:
static
BYTE PowerFlag = 0;     /* indicates if "power" is on */

static
void SELECT (void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	SpiDriver::SpiCsLow ();
 8001e28:	f000 feaa 	bl	8002b80 <_ZN9SpiDriver8SpiCsLowEv>
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZL8DESELECTv>:

static
void DESELECT (void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	SpiDriver::SpiCsHigh ();
 8001e34:	f000 feb4 	bl	8002ba0 <_ZN9SpiDriver9SpiCsHighEv>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_ZL8xmit_spih>:
//
//


static void xmit_spi (BYTE Data)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	SpiDriver::Transmit(Data);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 feb9 	bl	8002bc0 <_ZN9SpiDriver8TransmitEh>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_ZL8rcvr_spiv>:

static BYTE rcvr_spi (void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
	 uint8_t Data = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	71fb      	strb	r3, [r7, #7]
	 Data = SpiDriver::Transmit(0xFF);
 8001e60:	20ff      	movs	r0, #255	; 0xff
 8001e62:	f000 fead 	bl	8002bc0 <_ZN9SpiDriver8TransmitEh>
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  return Data;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZL10rcvr_spi_mPh>:


static
void rcvr_spi_m (BYTE *dst)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    *dst = rcvr_spi();
 8001e7c:	f7ff ffeb 	bl	8001e56 <_ZL8rcvr_spiv>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	701a      	strb	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZL10wait_readyv>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
    BYTE res;

    Timer2 = 50;    /* Wait for ready in timeout of 500ms */
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <_ZL10wait_readyv+0x40>)
 8001e98:	2232      	movs	r2, #50	; 0x32
 8001e9a:	701a      	strb	r2, [r3, #0]
    rcvr_spi();
 8001e9c:	f7ff ffdb 	bl	8001e56 <_ZL8rcvr_spiv>
    do
        res = rcvr_spi();
 8001ea0:	f7ff ffd9 	bl	8001e56 <_ZL8rcvr_spiv>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
    while ((res != 0xFF) && Timer2);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d006      	beq.n	8001ebc <_ZL10wait_readyv+0x2c>
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_ZL10wait_readyv+0x40>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZL10wait_readyv+0x2c>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <_ZL10wait_readyv+0x2e>
 8001ebc:	2300      	movs	r3, #0
    do
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d000      	beq.n	8001ec4 <_ZL10wait_readyv+0x34>
 8001ec2:	e7ed      	b.n	8001ea0 <_ZL10wait_readyv+0x10>

    return res;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000003b 	.word	0x2000003b

08001ed4 <_ZL8power_onv>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
	uint8_t i;
 
  DESELECT();      // CS = 1
 8001eda:	f7ff ffa9 	bl	8001e30 <_ZL8DESELECTv>


  for (i = 0; i < 10; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	dc06      	bgt.n	8001ef6 <_ZL8power_onv+0x22>
    xmit_spi(0xFF);
 8001ee8:	20ff      	movs	r0, #255	; 0xff
 8001eea:	f7ff ffa7 	bl	8001e3c <_ZL8xmit_spih>
  for (i = 0; i < 10; i++)
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	e7f5      	b.n	8001ee2 <_ZL8power_onv+0xe>

  PowerFlag = 1;
 8001ef6:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <_ZL8power_onv+0x30>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000003d 	.word	0x2000003d

08001f08 <_ZL9power_offv>:


static
void power_off (void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <_ZL9power_offv+0x14>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	2000003d 	.word	0x2000003d

08001f20 <_ZL9chk_powerv>:

static
int chk_power(void)        /* Socket power state: 0=off, 1=on */
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
    return PowerFlag;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <_ZL9chk_powerv+0x14>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000003d 	.word	0x2000003d

08001f38 <_ZL14rcvr_datablockPhj>:
static
bool rcvr_datablock (
    BYTE *buff,            /* Data buffer to store received data */
    UINT btr            /* Byte count (must be even number) */
)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    BYTE token;

    Timer1 = 10;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <_ZL14rcvr_datablockPhj+0x80>)
 8001f44:	220a      	movs	r2, #10
 8001f46:	701a      	strb	r2, [r3, #0]
    do {                            /* Wait for data packet in timeout of 100ms */
        token = rcvr_spi();
 8001f48:	f7ff ff85 	bl	8001e56 <_ZL8rcvr_spiv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d106      	bne.n	8001f64 <_ZL14rcvr_datablockPhj+0x2c>
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <_ZL14rcvr_datablockPhj+0x80>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <_ZL14rcvr_datablockPhj+0x2c>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <_ZL14rcvr_datablockPhj+0x2e>
 8001f64:	2300      	movs	r3, #0
    do {                            /* Wait for data packet in timeout of 100ms */
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d000      	beq.n	8001f6c <_ZL14rcvr_datablockPhj+0x34>
 8001f6a:	e7ed      	b.n	8001f48 <_ZL14rcvr_datablockPhj+0x10>
    if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2bfe      	cmp	r3, #254	; 0xfe
 8001f70:	d001      	beq.n	8001f76 <_ZL14rcvr_datablockPhj+0x3e>
 8001f72:	2300      	movs	r3, #0
 8001f74:	e01c      	b.n	8001fb0 <_ZL14rcvr_datablockPhj+0x78>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff79 	bl	8001e74 <_ZL10rcvr_spi_mPh>
        rcvr_spi_m(buff++);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff73 	bl	8001e74 <_ZL10rcvr_spi_mPh>
    } while (btr -= 2);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3b02      	subs	r3, #2
 8001f92:	603b      	str	r3, [r7, #0]
    do {                            /* Receive the data block into buffer */
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d000      	beq.n	8001fa6 <_ZL14rcvr_datablockPhj+0x6e>
 8001fa4:	e7e7      	b.n	8001f76 <_ZL14rcvr_datablockPhj+0x3e>
    rcvr_spi();                        /* Discard CRC */
 8001fa6:	f7ff ff56 	bl	8001e56 <_ZL8rcvr_spiv>
    rcvr_spi();
 8001faa:	f7ff ff54 	bl	8001e56 <_ZL8rcvr_spiv>

    return TRUE;                    /* Return with success */
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000003a 	.word	0x2000003a

08001fbc <_ZL14xmit_datablockPKhh>:
static
bool xmit_datablock (
    const BYTE *buff,    /* 512 byte data block to be transmitted */
    BYTE token            /* Data/Stop token */
)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  BYTE resp, wc;
	uint32_t i = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]

    if (wait_ready() != 0xFF) return FALSE;
 8001fcc:	f7ff ff60 	bl	8001e90 <_ZL10wait_readyv>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2bff      	cmp	r3, #255	; 0xff
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <_ZL14xmit_datablockPKhh+0x28>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e04a      	b.n	800207a <_ZL14xmit_datablockPKhh+0xbe>

    xmit_spi(token);                    /* Xmit data token */
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff28 	bl	8001e3c <_ZL8xmit_spih>
    if (token != 0xFD) 
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2bfd      	cmp	r3, #253	; 0xfd
 8001ff0:	d03b      	beq.n	800206a <_ZL14xmit_datablockPKhh+0xae>
	{    /* Is data token */
        wc = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73bb      	strb	r3, [r7, #14]
        do 
		{                            /* Xmit the 512 byte data block to MMC */
            xmit_spi(*buff++);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff1c 	bl	8001e3c <_ZL8xmit_spih>
            xmit_spi(*buff++);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff15 	bl	8001e3c <_ZL8xmit_spih>
        do 
 8002012:	7bbb      	ldrb	r3, [r7, #14]
 8002014:	3b01      	subs	r3, #1
 8002016:	73bb      	strb	r3, [r7, #14]
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d000      	beq.n	800202a <_ZL14xmit_datablockPKhh+0x6e>
 8002028:	e7e5      	b.n	8001ff6 <_ZL14xmit_datablockPKhh+0x3a>
        } while (--wc);

 		rcvr_spi();
 800202a:	f7ff ff14 	bl	8001e56 <_ZL8rcvr_spiv>
		rcvr_spi();
 800202e:	f7ff ff12 	bl	8001e56 <_ZL8rcvr_spiv>

		while (i <= 64)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d80d      	bhi.n	8002054 <_ZL14xmit_datablockPKhh+0x98>
		{
        	resp = rcvr_spi();                /* Reveive data response */
 8002038:	f7ff ff0d 	bl	8001e56 <_ZL8rcvr_spiv>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
        	if ((resp & 0x1F) == 0x05)        /* If not accepted, return with error */
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2b05      	cmp	r3, #5
 8002048:	d100      	bne.n	800204c <_ZL14xmit_datablockPKhh+0x90>
            	break;
 800204a:	e003      	b.n	8002054 <_ZL14xmit_datablockPKhh+0x98>
			i++;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
		while (i <= 64)
 8002052:	e7ee      	b.n	8002032 <_ZL14xmit_datablockPKhh+0x76>
    	}
		while (rcvr_spi() == 0);
 8002054:	f7ff feff 	bl	8001e56 <_ZL8rcvr_spiv>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d000      	beq.n	800206a <_ZL14xmit_datablockPKhh+0xae>
 8002068:	e7f4      	b.n	8002054 <_ZL14xmit_datablockPKhh+0x98>
	}
	if ((resp & 0x1F) == 0x05)  
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b05      	cmp	r3, #5
 8002072:	d101      	bne.n	8002078 <_ZL14xmit_datablockPKhh+0xbc>
		return TRUE;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <_ZL14xmit_datablockPKhh+0xbe>
	else 
		return FALSE;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_ZL8send_cmdhm>:
static
BYTE send_cmd (
    BYTE cmd,        /* Command byte */
    DWORD arg        /* Argument */
)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	6039      	str	r1, [r7, #0]
 800208c:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (wait_ready() != 0xFF) return 0xFF;
 800208e:	f7ff feff 	bl	8001e90 <_ZL10wait_readyv>
 8002092:	4603      	mov	r3, r0
 8002094:	2bff      	cmp	r3, #255	; 0xff
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <_ZL8send_cmdhm+0x24>
 80020a2:	23ff      	movs	r3, #255	; 0xff
 80020a4:	e046      	b.n	8002134 <_ZL8send_cmdhm+0xb2>

    /* Send command packet */
    xmit_spi(cmd);                        /* Command */
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fec7 	bl	8001e3c <_ZL8xmit_spih>
    xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	0e1b      	lsrs	r3, r3, #24
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fec1 	bl	8001e3c <_ZL8xmit_spih>
    xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff febb 	bl	8001e3c <_ZL8xmit_spih>
    xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff feb5 	bl	8001e3c <_ZL8xmit_spih>
    xmit_spi((BYTE)arg);                /* Argument[7..0] */
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff feb0 	bl	8001e3c <_ZL8xmit_spih>
    n = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d101      	bne.n	80020ea <_ZL8send_cmdhm+0x68>
 80020e6:	2395      	movs	r3, #149	; 0x95
 80020e8:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b48      	cmp	r3, #72	; 0x48
 80020ee:	d101      	bne.n	80020f4 <_ZL8send_cmdhm+0x72>
 80020f0:	2387      	movs	r3, #135	; 0x87
 80020f2:	73fb      	strb	r3, [r7, #15]
    xmit_spi(n);
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fea0 	bl	8001e3c <_ZL8xmit_spih>

    /* Receive command response */
    if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b4c      	cmp	r3, #76	; 0x4c
 8002100:	d101      	bne.n	8002106 <_ZL8send_cmdhm+0x84>
 8002102:	f7ff fea8 	bl	8001e56 <_ZL8rcvr_spiv>
    n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
 8002106:	230a      	movs	r3, #10
 8002108:	73fb      	strb	r3, [r7, #15]
    do
        res = rcvr_spi();
 800210a:	f7ff fea4 	bl	8001e56 <_ZL8rcvr_spiv>
 800210e:	4603      	mov	r3, r0
 8002110:	73bb      	strb	r3, [r7, #14]
    while ((res & 0x80) && --n);
 8002112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002116:	2b00      	cmp	r3, #0
 8002118:	da07      	bge.n	800212a <_ZL8send_cmdhm+0xa8>
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	3b01      	subs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <_ZL8send_cmdhm+0xa8>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <_ZL8send_cmdhm+0xaa>
 800212a:	2300      	movs	r3, #0
    do
 800212c:	2b00      	cmp	r3, #0
 800212e:	d000      	beq.n	8002132 <_ZL8send_cmdhm+0xb0>
 8002130:	e7eb      	b.n	800210a <_ZL8send_cmdhm+0x88>

    return res;            /* Return with the response value */
 8002132:	7bbb      	ldrb	r3, [r7, #14]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, ocr[4];


    if (drv) return STA_NOINIT;            /* Supports only single drive */
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <disk_initialize+0x14>
 800214c:	2301      	movs	r3, #1
 800214e:	e108      	b.n	8002362 <disk_initialize+0x226>
    if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
 8002150:	4b86      	ldr	r3, [pc, #536]	; (800236c <disk_initialize+0x230>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <disk_initialize+0x34>
 8002168:	4b80      	ldr	r3, [pc, #512]	; (800236c <disk_initialize+0x230>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e0f8      	b.n	8002362 <disk_initialize+0x226>

    power_on();                            /* Force socket power on */
 8002170:	f7ff feb0 	bl	8001ed4 <_ZL8power_onv>
    //send_initial_clock_train();

    SELECT();                /* CS = L */
 8002174:	f7ff fe56 	bl	8001e24 <_ZL6SELECTv>
    ty = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	73bb      	strb	r3, [r7, #14]
    if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
 800217c:	2100      	movs	r1, #0
 800217e:	2040      	movs	r0, #64	; 0x40
 8002180:	f7ff ff7f 	bl	8002082 <_ZL8send_cmdhm>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80ce 	beq.w	8002332 <disk_initialize+0x1f6>
        Timer1 = 100;                        /* Initialization timeout of 1000 msec */
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <disk_initialize+0x234>)
 8002198:	2264      	movs	r2, #100	; 0x64
 800219a:	701a      	strb	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
 800219c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80021a0:	2048      	movs	r0, #72	; 0x48
 80021a2:	f7ff ff6e 	bl	8002082 <_ZL8send_cmdhm>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d068      	beq.n	8002288 <disk_initialize+0x14c>
            for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	dc0d      	bgt.n	80021dc <disk_initialize+0xa0>
 80021c0:	7bfc      	ldrb	r4, [r7, #15]
 80021c2:	f7ff fe48 	bl	8001e56 <_ZL8rcvr_spiv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	4423      	add	r3, r4
 80021d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	e7ee      	b.n	80021ba <disk_initialize+0x7e>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	f040 80a7 	bne.w	8002332 <disk_initialize+0x1f6>
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	2baa      	cmp	r3, #170	; 0xaa
 80021e8:	f040 80a3 	bne.w	8002332 <disk_initialize+0x1f6>
                do {
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 80021ec:	2100      	movs	r1, #0
 80021ee:	2077      	movs	r0, #119	; 0x77
 80021f0:	f7ff ff47 	bl	8002082 <_ZL8send_cmdhm>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	dc09      	bgt.n	800220e <disk_initialize+0xd2>
 80021fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021fe:	2069      	movs	r0, #105	; 0x69
 8002200:	f7ff ff3f 	bl	8002082 <_ZL8send_cmdhm>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <disk_initialize+0xd2>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <disk_initialize+0xd4>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <disk_initialize+0xee>
                } while (Timer1);
 8002214:	4b56      	ldr	r3, [pc, #344]	; (8002370 <disk_initialize+0x234>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
                do {
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <disk_initialize+0xf0>
 8002228:	e7e0      	b.n	80021ec <disk_initialize+0xb0>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 800222a:	bf00      	nop
                if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <disk_initialize+0x234>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <disk_initialize+0x10c>
 8002236:	2100      	movs	r1, #0
 8002238:	207a      	movs	r0, #122	; 0x7a
 800223a:	f7ff ff22 	bl	8002082 <_ZL8send_cmdhm>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <disk_initialize+0x10c>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <disk_initialize+0x10e>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d071      	beq.n	8002332 <disk_initialize+0x1f6>
                    for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b03      	cmp	r3, #3
 8002256:	dc0d      	bgt.n	8002274 <disk_initialize+0x138>
 8002258:	7bfc      	ldrb	r4, [r7, #15]
 800225a:	f7ff fdfc 	bl	8001e56 <_ZL8rcvr_spiv>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4423      	add	r3, r4
 8002268:	f803 2c08 	strb.w	r2, [r3, #-8]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3301      	adds	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e7ee      	b.n	8002252 <disk_initialize+0x116>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
 8002274:	7a3b      	ldrb	r3, [r7, #8]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <disk_initialize+0x146>
 800227e:	2306      	movs	r3, #6
 8002280:	e000      	b.n	8002284 <disk_initialize+0x148>
 8002282:	2302      	movs	r3, #2
 8002284:	73bb      	strb	r3, [r7, #14]
 8002286:	e054      	b.n	8002332 <disk_initialize+0x1f6>
                }
            }
        } else {                            /* SDC Ver1 or MMC */
            ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
 8002288:	2100      	movs	r1, #0
 800228a:	2077      	movs	r0, #119	; 0x77
 800228c:	f7ff fef9 	bl	8002082 <_ZL8send_cmdhm>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	dc08      	bgt.n	80022a8 <disk_initialize+0x16c>
 8002296:	2100      	movs	r1, #0
 8002298:	2069      	movs	r0, #105	; 0x69
 800229a:	f7ff fef2 	bl	8002082 <_ZL8send_cmdhm>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	dc01      	bgt.n	80022a8 <disk_initialize+0x16c>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e000      	b.n	80022aa <disk_initialize+0x16e>
 80022a8:	2301      	movs	r3, #1
 80022aa:	73bb      	strb	r3, [r7, #14]
            do {
                if (ty == 2) {
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d113      	bne.n	80022da <disk_initialize+0x19e>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
 80022b2:	2100      	movs	r1, #0
 80022b4:	2077      	movs	r0, #119	; 0x77
 80022b6:	f7ff fee4 	bl	8002082 <_ZL8send_cmdhm>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	dc08      	bgt.n	80022d2 <disk_initialize+0x196>
 80022c0:	2100      	movs	r1, #0
 80022c2:	2069      	movs	r0, #105	; 0x69
 80022c4:	f7ff fedd 	bl	8002082 <_ZL8send_cmdhm>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <disk_initialize+0x196>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <disk_initialize+0x198>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <disk_initialize+0x1b6>
 80022d8:	e017      	b.n	800230a <disk_initialize+0x1ce>
                } else {
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 80022da:	2100      	movs	r1, #0
 80022dc:	2041      	movs	r0, #65	; 0x41
 80022de:	f7ff fed0 	bl	8002082 <_ZL8send_cmdhm>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <disk_initialize+0x1cc>
                }
            } while (Timer1);
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <disk_initialize+0x234>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
            do {
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <disk_initialize+0x1ce>
 8002306:	e7d1      	b.n	80022ac <disk_initialize+0x170>
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8002308:	bf00      	nop
            if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <disk_initialize+0x234>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <disk_initialize+0x1e8>
 8002314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002318:	2050      	movs	r0, #80	; 0x50
 800231a:	f7ff feb2 	bl	8002082 <_ZL8send_cmdhm>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <disk_initialize+0x1ec>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <disk_initialize+0x1ee>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <disk_initialize+0x1f6>
                ty = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	73bb      	strb	r3, [r7, #14]
        }
    }
    CardType = ty;
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <disk_initialize+0x238>)
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	7013      	strb	r3, [r2, #0]
    DESELECT();            /* CS = H */
 8002338:	f7ff fd7a 	bl	8001e30 <_ZL8DESELECTv>
    rcvr_spi();            /* Idle (Release DO) */
 800233c:	f7ff fd8b 	bl	8001e56 <_ZL8rcvr_spiv>

    if (ty)           /* Initialization succeded */
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <disk_initialize+0x21c>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <disk_initialize+0x230>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <disk_initialize+0x230>)
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e001      	b.n	800235c <disk_initialize+0x220>
	else          /* Initialization failed */
        power_off();
 8002358:	f7ff fdd6 	bl	8001f08 <_ZL9power_offv>

    return Stat;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <disk_initialize+0x230>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000
 8002370:	2000003a 	.word	0x2000003a
 8002374:	2000003c 	.word	0x2000003c

08002378 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;        /* Supports only single drive */
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <disk_status+0x14>
 8002388:	2301      	movs	r3, #1
 800238a:	e002      	b.n	8002392 <disk_status+0x1a>
    return Stat;
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <disk_status+0x28>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <disk_read>:
    BYTE drv,            /* Physical drive nmuber (0) */
    BYTE *buff,            /* Pointer to the data buffer to store read data */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	4613      	mov	r3, r2
 80023b6:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <disk_read+0x20>
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <disk_read+0x24>
 80023c4:	2304      	movs	r3, #4
 80023c6:	e069      	b.n	800249c <disk_read+0xf8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <disk_read+0x100>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <disk_read+0x40>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e05b      	b.n	800249c <disk_read+0xf8>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <disk_read+0x104>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <disk_read+0x52>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	025b      	lsls	r3, r3, #9
 80023f4:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 80023f6:	f7ff fd15 	bl	8001e24 <_ZL6SELECTv>

    if (count == 1) {    /* Single block read */
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d116      	bne.n	800242e <disk_read+0x8a>
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	2051      	movs	r0, #81	; 0x51
 8002404:	f7ff fe3d 	bl	8002082 <_ZL8send_cmdhm>
 8002408:	4603      	mov	r3, r0
            && rcvr_datablock(buff, 512))
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <disk_read+0x7e>
 800240e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f7ff fd90 	bl	8001f38 <_ZL14rcvr_datablockPhj>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <disk_read+0x7e>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <disk_read+0x80>
 8002422:	2300      	movs	r3, #0
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02e      	beq.n	8002486 <disk_read+0xe2>
            count = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	73bb      	strb	r3, [r7, #14]
 800242c:	e02b      	b.n	8002486 <disk_read+0xe2>
    }
    else {                /* Multiple block read */
        if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	2052      	movs	r0, #82	; 0x52
 8002432:	f7ff fe26 	bl	8002082 <_ZL8send_cmdhm>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01f      	beq.n	8002486 <disk_read+0xe2>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 8002446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800244a:	68b8      	ldr	r0, [r7, #8]
 800244c:	f7ff fd74 	bl	8001f38 <_ZL14rcvr_datablockPhj>
 8002450:	4603      	mov	r3, r0
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10f      	bne.n	800247c <disk_read+0xd8>
                buff += 512;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002462:	60bb      	str	r3, [r7, #8]
            do {
 8002464:	7bbb      	ldrb	r3, [r7, #14]
 8002466:	3b01      	subs	r3, #1
 8002468:	73bb      	strb	r3, [r7, #14]
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <disk_read+0xda>
 800247a:	e7e4      	b.n	8002446 <disk_read+0xa2>
                if (!rcvr_datablock(buff, 512)) break;
 800247c:	bf00      	nop
            } while (--count);
            send_cmd(CMD12, 0);                /* STOP_TRANSMISSION */
 800247e:	2100      	movs	r1, #0
 8002480:	204c      	movs	r0, #76	; 0x4c
 8002482:	f7ff fdfe 	bl	8002082 <_ZL8send_cmdhm>
        }
    }

    DESELECT();            /* CS = H */
 8002486:	f7ff fcd3 	bl	8001e30 <_ZL8DESELECTv>
    rcvr_spi();            /* Idle (Release DO) */
 800248a:	f7ff fce4 	bl	8001e56 <_ZL8rcvr_spiv>

    return count ? RES_ERROR : RES_OK;
 800248e:	7bbb      	ldrb	r3, [r7, #14]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <disk_read+0xf4>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <disk_read+0xf6>
 8002498:	2300      	movs	r3, #0
 800249a:	bf00      	nop
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	2000003c 	.word	0x2000003c

080024ac <disk_write>:
    BYTE drv,            /* Physical drive nmuber (0) */
    const BYTE *buff,    /* Pointer to the data to be written */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	4613      	mov	r3, r2
 80024be:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <disk_write+0x20>
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <disk_write+0x24>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e08c      	b.n	80025ea <disk_write+0x13e>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <disk_write+0x148>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <disk_write+0x40>
 80024e8:	2303      	movs	r3, #3
 80024ea:	e07e      	b.n	80025ea <disk_write+0x13e>
    if (Stat & STA_PROTECT) return RES_WRPRT;
 80024ec:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <disk_write+0x148>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <disk_write+0x5c>
 8002504:	2302      	movs	r3, #2
 8002506:	e070      	b.n	80025ea <disk_write+0x13e>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8002508:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <disk_write+0x14c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <disk_write+0x6e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	025b      	lsls	r3, r3, #9
 8002518:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 800251a:	f7ff fc83 	bl	8001e24 <_ZL6SELECTv>

    if (count == 1) {    /* Single block write */
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d115      	bne.n	8002550 <disk_write+0xa4>
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	2058      	movs	r0, #88	; 0x58
 8002528:	f7ff fdab 	bl	8002082 <_ZL8send_cmdhm>
 800252c:	4603      	mov	r3, r0
            && xmit_datablock(buff, 0xFE))
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <disk_write+0x98>
 8002532:	21fe      	movs	r1, #254	; 0xfe
 8002534:	68b8      	ldr	r0, [r7, #8]
 8002536:	f7ff fd41 	bl	8001fbc <_ZL14xmit_datablockPKhh>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <disk_write+0x98>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <disk_write+0x9a>
 8002544:	2300      	movs	r3, #0
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <disk_write+0x128>
            count = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	73bb      	strb	r3, [r7, #14]
 800254e:	e041      	b.n	80025d4 <disk_write+0x128>
    }
    else {                /* Multiple block write */
        if (CardType & 2) {
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <disk_write+0x14c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <disk_write+0xc2>
            send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
 800255c:	2100      	movs	r1, #0
 800255e:	2077      	movs	r0, #119	; 0x77
 8002560:	f7ff fd8f 	bl	8002082 <_ZL8send_cmdhm>
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	4619      	mov	r1, r3
 8002568:	2057      	movs	r0, #87	; 0x57
 800256a:	f7ff fd8a 	bl	8002082 <_ZL8send_cmdhm>
        }
        if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	2059      	movs	r0, #89	; 0x59
 8002572:	f7ff fd86 	bl	8002082 <_ZL8send_cmdhm>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d026      	beq.n	80025d4 <disk_write+0x128>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 8002586:	21fc      	movs	r1, #252	; 0xfc
 8002588:	68b8      	ldr	r0, [r7, #8]
 800258a:	f7ff fd17 	bl	8001fbc <_ZL14xmit_datablockPKhh>
 800258e:	4603      	mov	r3, r0
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <disk_write+0x10e>
                buff += 512;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025a0:	60bb      	str	r3, [r7, #8]
            do {
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	73bb      	strb	r3, [r7, #14]
 80025a8:	7bbb      	ldrb	r3, [r7, #14]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <disk_write+0x110>
 80025b8:	e7e5      	b.n	8002586 <disk_write+0xda>
                if (!xmit_datablock(buff, 0xFC)) break;
 80025ba:	bf00      	nop
            } while (--count);
            if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
 80025bc:	21fd      	movs	r1, #253	; 0xfd
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff fcfc 	bl	8001fbc <_ZL14xmit_datablockPKhh>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <disk_write+0x128>
                count = 1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73bb      	strb	r3, [r7, #14]
        }
    }

    DESELECT();            /* CS = H */
 80025d4:	f7ff fc2c 	bl	8001e30 <_ZL8DESELECTv>
    rcvr_spi();            /* Idle (Release DO) */
 80025d8:	f7ff fc3d 	bl	8001e56 <_ZL8rcvr_spiv>

    return count ? RES_ERROR : RES_OK;
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <disk_write+0x13a>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <disk_write+0x13c>
 80025e6:	2300      	movs	r3, #0
 80025e8:	bf00      	nop
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	2000003c 	.word	0x2000003c

080025fc <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE drv,        /* Physical drive nmuber (0) */
    BYTE ctrl,        /* Control code */
    void *buff        /* Buffer to send/receive control data */
)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08b      	sub	sp, #44	; 0x2c
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	603a      	str	r2, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
 8002608:	460b      	mov	r3, r1
 800260a:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    BYTE *ptr = (BYTE*) buff;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	623b      	str	r3, [r7, #32]
    WORD csize;


    if (drv) return RES_PARERR;
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <disk_ioctl+0x1e>
 8002616:	2304      	movs	r3, #4
 8002618:	e139      	b.n	800288e <disk_ioctl+0x292>

    res = RES_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER) {
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d12c      	bne.n	8002680 <disk_ioctl+0x84>
        switch (*ptr) {
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d013      	beq.n	8002656 <disk_ioctl+0x5a>
 800262e:	2b02      	cmp	r3, #2
 8002630:	d017      	beq.n	8002662 <disk_ioctl+0x66>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d120      	bne.n	8002678 <disk_ioctl+0x7c>
        case 0:        /* Sub control code == 0 (POWER_OFF) */
            if (chk_power())
 8002636:	f7ff fc73 	bl	8001f20 <_ZL9chk_powerv>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <disk_ioctl+0x52>
                power_off();        /* Power off */
 800264a:	f7ff fc5d 	bl	8001f08 <_ZL9power_offv>
            res = RES_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002654:	e119      	b.n	800288a <disk_ioctl+0x28e>
        case 1:        /* Sub control code == 1 (POWER_ON) */
            power_on();                /* Power on */
 8002656:	f7ff fc3d 	bl	8001ed4 <_ZL8power_onv>
            res = RES_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002660:	e113      	b.n	800288a <disk_ioctl+0x28e>
        case 2:        /* Sub control code == 2 (POWER_GET) */
            *(ptr+1) = (BYTE)chk_power();
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	1c5c      	adds	r4, r3, #1
 8002666:	f7ff fc5b 	bl	8001f20 <_ZL9chk_powerv>
 800266a:	4603      	mov	r3, r0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	7023      	strb	r3, [r4, #0]
            res = RES_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002676:	e108      	b.n	800288a <disk_ioctl+0x28e>
        default :
            res = RES_PARERR;
 8002678:	2304      	movs	r3, #4
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800267e:	e104      	b.n	800288a <disk_ioctl+0x28e>
        }
    }
    else {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002680:	4b85      	ldr	r3, [pc, #532]	; (8002898 <disk_ioctl+0x29c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <disk_ioctl+0xa0>
 8002698:	2303      	movs	r3, #3
 800269a:	e0f8      	b.n	800288e <disk_ioctl+0x292>

        SELECT();        /* CS = L */
 800269c:	f7ff fbc2 	bl	8001e24 <_ZL6SELECTv>

        switch (ctrl) {
 80026a0:	79bb      	ldrb	r3, [r7, #6]
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	f200 80e2 	bhi.w	800286c <disk_ioctl+0x270>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <disk_ioctl+0xb4>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080027af 	.word	0x080027af
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	0800279f 	.word	0x0800279f
 80026bc:	0800286d 	.word	0x0800286d
 80026c0:	0800286d 	.word	0x0800286d
 80026c4:	0800286d 	.word	0x0800286d
 80026c8:	0800286d 	.word	0x0800286d
 80026cc:	0800286d 	.word	0x0800286d
 80026d0:	0800286d 	.word	0x0800286d
 80026d4:	0800286d 	.word	0x0800286d
 80026d8:	0800286d 	.word	0x0800286d
 80026dc:	080027cb 	.word	0x080027cb
 80026e0:	080027f9 	.word	0x080027f9
 80026e4:	08002827 	.word	0x08002827
        case GET_SECTOR_COUNT :    /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80026e8:	2100      	movs	r1, #0
 80026ea:	2049      	movs	r0, #73	; 0x49
 80026ec:	f7ff fcc9 	bl	8002082 <_ZL8send_cmdhm>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10a      	bne.n	800270c <disk_ioctl+0x110>
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	2110      	movs	r1, #16
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fc1b 	bl	8001f38 <_ZL14rcvr_datablockPhj>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <disk_ioctl+0x110>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <disk_ioctl+0x112>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80b0 	beq.w	8002874 <disk_ioctl+0x278>
                if ((csd[0] >> 6) == 1) {    /* SDC ver 2.00 */
 8002714:	7b3b      	ldrb	r3, [r7, #12]
 8002716:	119b      	asrs	r3, r3, #6
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10e      	bne.n	800273a <disk_ioctl+0x13e>
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 800271c:	7d7b      	ldrb	r3, [r7, #21]
 800271e:	b29a      	uxth	r2, r3
 8002720:	7d3b      	ldrb	r3, [r7, #20]
 8002722:	b29b      	uxth	r3, r3
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	b29b      	uxth	r3, r3
 8002728:	4413      	add	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*)buff = (DWORD)csize << 10;
 8002730:	8bfb      	ldrh	r3, [r7, #30]
 8002732:	029a      	lsls	r2, r3, #10
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e02d      	b.n	8002796 <disk_ioctl+0x19a>
                } else {                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800273a:	7c7b      	ldrb	r3, [r7, #17]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	b2da      	uxtb	r2, r3
 8002742:	7dbb      	ldrb	r3, [r7, #22]
 8002744:	09db      	lsrs	r3, r3, #7
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	b2da      	uxtb	r2, r3
 800274c:	7d7b      	ldrb	r3, [r7, #21]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0306 	and.w	r3, r3, #6
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4413      	add	r3, r2
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3302      	adds	r3, #2
 800275e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002762:	7d3b      	ldrb	r3, [r7, #20]
 8002764:	119b      	asrs	r3, r3, #6
 8002766:	b29a      	uxth	r2, r3
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	b29b      	uxth	r3, r3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	7cbb      	ldrb	r3, [r7, #18]
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	b29b      	uxth	r3, r3
 800277a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*)buff = (DWORD)csize << (n - 9);
 8002788:	8bfa      	ldrh	r2, [r7, #30]
 800278a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800278e:	3b09      	subs	r3, #9
 8002790:	409a      	lsls	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800279c:	e06a      	b.n	8002874 <disk_ioctl+0x278>

        case GET_SECTOR_SIZE :    /* Get sectors on the disk (WORD) */
            *(WORD*)buff = 512;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a4:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80027ac:	e069      	b.n	8002882 <disk_ioctl+0x286>

        case CTRL_SYNC :    /* Make sure that data has been written */
            if (wait_ready() == 0xFF)
 80027ae:	f7ff fb6f 	bl	8001e90 <_ZL10wait_readyv>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2bff      	cmp	r3, #255	; 0xff
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d05a      	beq.n	8002878 <disk_ioctl+0x27c>
                res = RES_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80027c8:	e056      	b.n	8002878 <disk_ioctl+0x27c>

        case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0        /* READ_CSD */
 80027ca:	2100      	movs	r1, #0
 80027cc:	2049      	movs	r0, #73	; 0x49
 80027ce:	f7ff fc58 	bl	8002082 <_ZL8send_cmdhm>
 80027d2:	4603      	mov	r3, r0
                && rcvr_datablock(ptr, 16))
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d108      	bne.n	80027ea <disk_ioctl+0x1ee>
 80027d8:	2110      	movs	r1, #16
 80027da:	6a38      	ldr	r0, [r7, #32]
 80027dc:	f7ff fbac 	bl	8001f38 <_ZL14rcvr_datablockPhj>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <disk_ioctl+0x1ee>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <disk_ioctl+0x1f0>
 80027ea:	2300      	movs	r3, #0
            if (send_cmd(CMD9, 0) == 0        /* READ_CSD */
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d045      	beq.n	800287c <disk_ioctl+0x280>
                res = RES_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80027f6:	e041      	b.n	800287c <disk_ioctl+0x280>

        case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0        /* READ_CID */
 80027f8:	2100      	movs	r1, #0
 80027fa:	204a      	movs	r0, #74	; 0x4a
 80027fc:	f7ff fc41 	bl	8002082 <_ZL8send_cmdhm>
 8002800:	4603      	mov	r3, r0
                && rcvr_datablock(ptr, 16))
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <disk_ioctl+0x21c>
 8002806:	2110      	movs	r1, #16
 8002808:	6a38      	ldr	r0, [r7, #32]
 800280a:	f7ff fb95 	bl	8001f38 <_ZL14rcvr_datablockPhj>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <disk_ioctl+0x21c>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <disk_ioctl+0x21e>
 8002818:	2300      	movs	r3, #0
            if (send_cmd(CMD10, 0) == 0        /* READ_CID */
 800281a:	2b00      	cmp	r3, #0
 800281c:	d030      	beq.n	8002880 <disk_ioctl+0x284>
                res = RES_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002824:	e02c      	b.n	8002880 <disk_ioctl+0x284>

        case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0) {    /* READ_OCR */
 8002826:	2100      	movs	r1, #0
 8002828:	207a      	movs	r0, #122	; 0x7a
 800282a:	f7ff fc2a 	bl	8002082 <_ZL8send_cmdhm>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <disk_ioctl+0x270>
                for (n = 0; n < 4; n++)
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002848:	2b03      	cmp	r3, #3
 800284a:	dc0c      	bgt.n	8002866 <disk_ioctl+0x26a>
                    *ptr++ = rcvr_spi();
 800284c:	6a3c      	ldr	r4, [r7, #32]
 800284e:	1c63      	adds	r3, r4, #1
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	f7ff fb00 	bl	8001e56 <_ZL8rcvr_spiv>
 8002856:	4603      	mov	r3, r0
 8002858:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 800285a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800285e:	3301      	adds	r3, #1
 8002860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002864:	e7ee      	b.n	8002844 <disk_ioctl+0x248>
                res = RES_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//            *ptr = CardType;
//            res = RES_OK;
//            break;

        default:
            res = RES_PARERR;
 800286c:	2304      	movs	r3, #4
 800286e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002872:	e006      	b.n	8002882 <disk_ioctl+0x286>
            break;
 8002874:	bf00      	nop
 8002876:	e004      	b.n	8002882 <disk_ioctl+0x286>
            break;
 8002878:	bf00      	nop
 800287a:	e002      	b.n	8002882 <disk_ioctl+0x286>
            break;
 800287c:	bf00      	nop
 800287e:	e000      	b.n	8002882 <disk_ioctl+0x286>
            break;
 8002880:	bf00      	nop
        }

        DESELECT();            /* CS = H */
 8002882:	f7ff fad5 	bl	8001e30 <_ZL8DESELECTv>
        rcvr_spi();            /* Idle (Release DO) */
 8002886:	f7ff fae6 	bl	8001e56 <_ZL8rcvr_spiv>
    }

    return res;
 800288a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800288e:	4618      	mov	r0, r3
 8002890:	372c      	adds	r7, #44	; 0x2c
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000

0800289c <_ZN3dacC1EPhm>:
  GPIOA->AFR[0] |= (1<<16) | (1<<19);

}


dac::dac(uint8_t * waveSampleArray, uint32_t  waveSampleNb){
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
	  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	6153      	str	r3, [r2, #20]
	  RCC->AHBENR |= RCC_AHBENR_DMA2EN;
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	6153      	str	r3, [r2, #20]
	  RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028ca:	61d3      	str	r3, [r2, #28]
	  RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80028cc:	4a1f      	ldr	r2, [pc, #124]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <_ZN3dacC1EPhm+0xb0>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f043 0310 	orr.w	r3, r3, #16
 80028d6:	61d3      	str	r3, [r2, #28]

	  GPIOA->MODER |= GPIO_MODER_MODER4_1;
 80028d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e6:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[0] |= (1<<16) | (1<<19);
 80028e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
 80028f6:	6213      	str	r3, [r2, #32]

	  DAC->CR = DAC_CR_DMAEN1 | DAC_CR_TEN1 |  DAC_CR_EN1;
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_ZN3dacC1EPhm+0xb4>)
 80028fa:	f241 0205 	movw	r2, #4101	; 0x1005
 80028fe:	601a      	str	r2, [r3, #0]

	  TIM6->ARR = 30;       // sampling freq (with prescaler)
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <_ZN3dacC1EPhm+0xb8>)
 8002902:	221e      	movs	r2, #30
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM6->PSC = 300;       //prescaler
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_ZN3dacC1EPhm+0xb8>)
 8002908:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
	  TIM6->CR2 |= TIM_CR2_MMS_1; // TRGO generated while timer overrun
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <_ZN3dacC1EPhm+0xb8>)
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_ZN3dacC1EPhm+0xb8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f043 0320 	orr.w	r3, r3, #32
 8002918:	6053      	str	r3, [r2, #4]
	  TIM6->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN; // TIM6 enable
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <_ZN3dacC1EPhm+0xb8>)
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <_ZN3dacC1EPhm+0xb8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8002924:	6013      	str	r3, [r2, #0]


	  DMA2_Channel3->CNDTR = waveSampleNb; // number of data to transfer
 8002926:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <_ZN3dacC1EPhm+0xbc>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6053      	str	r3, [r2, #4]
	  DMA2_Channel3->CPAR = (uint32_t)&(DAC->DHR8R1);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <_ZN3dacC1EPhm+0xbc>)
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <_ZN3dacC1EPhm+0xc0>)
 8002930:	609a      	str	r2, [r3, #8]
	  DMA2_Channel3->CMAR = (uint32_t)waveSampleArray; //memory address register
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <_ZN3dacC1EPhm+0xbc>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
	  DMA2_Channel3->CCR = DMA_CCR_MINC | DMA_CCR_CIRC  | DMA_CCR_DIR | DMA_CCR_EN; // enable circular, memory increment,  dir from memory to dac
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_ZN3dacC1EPhm+0xbc>)
 800293a:	22b1      	movs	r2, #177	; 0xb1
 800293c:	601a      	str	r2, [r3, #0]
}
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40021000 	.word	0x40021000
 8002950:	40007400 	.word	0x40007400
 8002954:	40001000 	.word	0x40001000
 8002958:	40020430 	.word	0x40020430
 800295c:	40007410 	.word	0x40007410

08002960 <main>:

#include "diskio.h"
#include "ff.h"
#include "wave.h"
int main(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	f5ad 4d13 	sub.w	sp, sp, #37632	; 0x9300
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 800296a:	f000 f9e5 	bl	8002d38 <SystemCoreClockUpdate>



  SpiDriver Spi;
 800296e:	f507 4313 	add.w	r3, r7, #37632	; 0x9300
 8002972:	f103 0310 	add.w	r3, r3, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f860 	bl	8002a3c <_ZN9SpiDriverC1Ev>


  disk_initialize(0);
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fbdd 	bl	800213c <disk_initialize>

  	FATFS fatDrive;
  	f_mount( 0, &fatDrive);
 8002982:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8002986:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 800298a:	4619      	mov	r1, r3
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fe87 	bl	80016a0 <f_mount>
  	FIL fp;
  	FRESULT res = 	f_open(&fp, "sound", FA_OPEN_EXISTING | FA_READ);
 8002992:	f507 430e 	add.w	r3, r7, #36352	; 0x8e00
 8002996:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 800299a:	2201      	movs	r2, #1
 800299c:	4926      	ldr	r1, [pc, #152]	; (8002a38 <main+0xd8>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fea8 	bl	80016f4 <f_open>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 80029aa:	f102 0217 	add.w	r2, r2, #23
 80029ae:	7013      	strb	r3, [r2, #0]
  	const uint16_t bytesToRead = 1024;
 80029b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b4:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 80029b8:	f102 0214 	add.w	r2, r2, #20
 80029bc:	8013      	strh	r3, [r2, #0]
  	uint8_t readBuff[bytesToRead];
  	UINT readBytes;
  	waveHeader_t waveHeader;
  	res = f_read(&fp,  (uint8_t*) &waveHeader, sizeof(waveHeader_t), &readBytes);
 80029be:	f507 430a 	add.w	r3, r7, #35328	; 0x8a00
 80029c2:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80029c6:	f507 410a 	add.w	r1, r7, #35328	; 0x8a00
 80029ca:	f101 018c 	add.w	r1, r1, #140	; 0x8c
 80029ce:	f507 400e 	add.w	r0, r7, #36352	; 0x8e00
 80029d2:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
 80029d6:	222c      	movs	r2, #44	; 0x2c
 80029d8:	f7fe fff9 	bl	80019ce <f_read>
 80029dc:	4603      	mov	r3, r0
 80029de:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 80029e2:	f102 0217 	add.w	r2, r2, #23
 80029e6:	7013      	strb	r3, [r2, #0]



  	uint8_t sound_wav[35460];
  	res = f_read(&fp,  (uint8_t*) sound_wav, 35460, &readBytes);
 80029e8:	f507 430a 	add.w	r3, r7, #35328	; 0x8a00
 80029ec:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80029f0:	f107 0118 	add.w	r1, r7, #24
 80029f4:	3910      	subs	r1, #16
 80029f6:	f507 400e 	add.w	r0, r7, #36352	; 0x8e00
 80029fa:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
 80029fe:	f648 2284 	movw	r2, #35460	; 0x8a84
 8002a02:	f7fe ffe4 	bl	80019ce <f_read>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002a0c:	f102 0217 	add.w	r2, r2, #23
 8002a10:	7013      	strb	r3, [r2, #0]
  	f_close(&fp);
 8002a12:	f507 430e 	add.w	r3, r7, #36352	; 0x8e00
 8002a16:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f9ee 	bl	8001dfc <f_close>

    dac dacObj((uint8_t*)sound_wav, 35460);
 8002a20:	f107 0118 	add.w	r1, r7, #24
 8002a24:	3910      	subs	r1, #16
 8002a26:	f107 0318 	add.w	r3, r7, #24
 8002a2a:	3b14      	subs	r3, #20
 8002a2c:	f648 2284 	movw	r2, #35460	; 0x8a84
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff33 	bl	800289c <_ZN3dacC1EPhm>
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <main+0xd6>
 8002a38:	08002e80 	.word	0x08002e80

08002a3c <_ZN9SpiDriverC1Ev>:

#include "spi.h"
#include "stm32f3xx.h"


SpiDriver::SpiDriver(void){
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	RCC->APB1RSTR |=  RCC_APB1RSTR_SPI2RST;
 8002a44:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4e:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &=  ~RCC_APB1RSTR_SPI2RST;
 8002a50:	4a48      	ldr	r2, [pc, #288]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a52:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5a:	6113      	str	r3, [r2, #16]

	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002a5c:	4a45      	ldr	r2, [pc, #276]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a66:	61d3      	str	r3, [r2, #28]


	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8002a68:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a6a:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <_ZN9SpiDriverC1Ev+0x138>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a72:	6153      	str	r3, [r2, #20]

	GPIOB->MODER |= GPIO_MODER_MODER12_0;
 8002a74:	4a40      	ldr	r2, [pc, #256]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER13_1;
 8002a80:	4a3d      	ldr	r2, [pc, #244]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a82:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a8a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER14_1;
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a8e:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a96:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER15_1;
 8002a98:	4a37      	ldr	r2, [pc, #220]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aa2:	6013      	str	r3, [r2, #0]


	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12;
 8002aa4:	4a34      	ldr	r2, [pc, #208]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002aae:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;
 8002ab0:	4a31      	ldr	r2, [pc, #196]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8002aba:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;
 8002abc:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8002ac6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;
 8002ac8:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ad2:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR|= GPIO_PUPDR_PUPDR12_0;
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ade:	60d3      	str	r3, [r2, #12]



	GPIOB->AFR[1] |= (1<<20) | (1<<22);
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002aea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1<<24) | (1<<26);
 8002aec:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002af6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1<<28) | (1<<30);
 8002af8:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <_ZN9SpiDriverC1Ev+0x13c>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8002b02:	6253      	str	r3, [r2, #36]	; 0x24


	SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_2 ;
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002b0e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_MSTR;
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |=  SPI_CR1_SSM;
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |=  SPI_CR1_SSI;
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6013      	str	r3, [r2, #0]

	SPI2->CR2 |= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6053      	str	r3, [r2, #4]
	SPI2->CR2 |= SPI_CR2_FRXTH;
 8002b40:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b4a:	6053      	str	r3, [r2, #4]
	SPI2->CR2 |= SPI_CR2_SSOE;
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6053      	str	r3, [r2, #4]

	SPI2->CR1 |= SPI_CR1_SPE;
 8002b58:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <_ZN9SpiDriverC1Ev+0x140>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b62:	6013      	str	r3, [r2, #0]

}
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	40003800 	.word	0x40003800

08002b80 <_ZN9SpiDriver8SpiCsLowEv>:



void SpiDriver::SpiCsLow (void){
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~GPIO_ODR_12;
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_ZN9SpiDriver8SpiCsLowEv+0x1c>)
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <_ZN9SpiDriver8SpiCsLowEv+0x1c>)
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8e:	6153      	str	r3, [r2, #20]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	48000400 	.word	0x48000400

08002ba0 <_ZN9SpiDriver9SpiCsHighEv>:
void SpiDriver::SpiCsHigh (void){
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIO_ODR_12;
 8002ba4:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_ZN9SpiDriver9SpiCsHighEv+0x1c>)
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <_ZN9SpiDriver9SpiCsHighEv+0x1c>)
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bae:	6153      	str	r3, [r2, #20]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	48000400 	.word	0x48000400

08002bc0 <_ZN9SpiDriver8TransmitEh>:




uint8_t SpiDriver::Transmit(uint8_t byte){
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	while (!(SPI2->SR & SPI_SR_TXE));
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <_ZN9SpiDriver8TransmitEh+0x50>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d000      	beq.n	8002be2 <_ZN9SpiDriver8TransmitEh+0x22>
 8002be0:	e7f3      	b.n	8002bca <_ZN9SpiDriver8TransmitEh+0xa>
	*(__IO uint8_t *) &(SPI2->DR) = byte;
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <_ZN9SpiDriver8TransmitEh+0x54>)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	7013      	strb	r3, [r2, #0]
	while (!(SPI2->SR & SPI_SR_RXNE));
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <_ZN9SpiDriver8TransmitEh+0x50>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d000      	beq.n	8002c00 <_ZN9SpiDriver8TransmitEh+0x40>
 8002bfe:	e7f3      	b.n	8002be8 <_ZN9SpiDriver8TransmitEh+0x28>
	return *(uint8_t *)&(SPI2->DR);
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <_ZN9SpiDriver8TransmitEh+0x54>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40003800 	.word	0x40003800
 8002c14:	4000380c 	.word	0x4000380c

08002c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c1e:	e003      	b.n	8002c28 <LoopCopyDataInit>

08002c20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c26:	3104      	adds	r1, #4

08002c28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c30:	d3f6      	bcc.n	8002c20 <CopyDataInit>
	ldr	r2, =_sbss
 8002c32:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c34:	e002      	b.n	8002c3c <LoopFillZerobss>

08002c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c38:	f842 3b04 	str.w	r3, [r2], #4

08002c3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <LoopForever+0x16>)
	cmp	r2, r3
 8002c3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c40:	d3f9      	bcc.n	8002c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c42:	f000 f813 	bl	8002c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c46:	f000 f8e3 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c4a:	f7ff fe89 	bl	8002960 <main>

08002c4e <LoopForever>:

LoopForever:
    b LoopForever
 8002c4e:	e7fe      	b.n	8002c4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c50:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002c54:	08002f10 	.word	0x08002f10
	ldr	r0, =_sdata
 8002c58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c5c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002c60:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8002c64:	20000040 	.word	0x20000040

08002c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c68:	e7fe      	b.n	8002c68 <ADC1_2_IRQHandler>
	...

08002c6c <SystemInit>:




void SystemInit(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c70:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <SystemInit+0xc0>)
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <SystemInit+0xc0>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif



      RCC->CR |= RCC_CR_HSEON;   /*chose internal 16mhz as base clock*/
 8002c80:	4a2b      	ldr	r2, [pc, #172]	; (8002d30 <SystemInit+0xc4>)
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <SystemInit+0xc4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
      while((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY); /*wake for internal source to be ready*/
 8002c8c:	bf00      	nop
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <SystemInit+0xc4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c9a:	d1f8      	bne.n	8002c8e <SystemInit+0x22>

      RCC->CR &= ~RCC_CR_PLLON; /* disable PLL  it could be configured only when it is  disabled*/
 8002c9c:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <SystemInit+0xc4>)
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <SystemInit+0xc4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

      FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8002ca8:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <SystemInit+0xc8>)
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <SystemInit+0xc8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Reset CFGR register */
      RCC->CFGR = 0x00000000U;
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <SystemInit+0xc4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	605a      	str	r2, [r3, #4]
      RCC->CFGR |=  RCC_CFGR_PLLMUL9;
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <SystemInit+0xc4>)
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <SystemInit+0xc4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002cc4:	6053      	str	r3, [r2, #4]
      RCC->CFGR |=  RCC_CFGR_PLLSRC_HSE_PREDIV;
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <SystemInit+0xc4>)
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <SystemInit+0xc4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6053      	str	r3, [r2, #4]
      RCC->CFGR |=  RCC_CFGR_PPRE2_DIV2;
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <SystemInit+0xc4>)
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <SystemInit+0xc4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cdc:	6053      	str	r3, [r2, #4]

      RCC->CR |= RCC_CR_PLLON;
 8002cde:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <SystemInit+0xc4>)
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <SystemInit+0xc4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]
      while((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY);
 8002cea:	bf00      	nop
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <SystemInit+0xc4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cf8:	d1f8      	bne.n	8002cec <SystemInit+0x80>





      RCC->CFGR  |= RCC_CFGR_SW_PLL;
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <SystemInit+0xc4>)
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <SystemInit+0xc4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6053      	str	r3, [r2, #4]
      while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002d06:	bf00      	nop
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <SystemInit+0xc4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d1f9      	bne.n	8002d08 <SystemInit+0x9c>

      /* Disable all interrupts */
      RCC->CIR = 0x00000000U;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <SystemInit+0xc4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]

      /* Configure the Vector Table location add offset address ------------------*/
    #ifdef VECT_TAB_SRAM
      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    #else
      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SystemInit+0xc0>)
 8002d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d20:	609a      	str	r2, [r3, #8]
    #endif
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40022000 	.word	0x40022000

08002d38 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <SystemCoreClockUpdate+0xc4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d007      	beq.n	8002d6e <SystemCoreClockUpdate+0x36>
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d009      	beq.n	8002d76 <SystemCoreClockUpdate+0x3e>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d12f      	bne.n	8002dc6 <SystemCoreClockUpdate+0x8e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <SystemCoreClockUpdate+0xcc>)
 8002d6a:	601a      	str	r2, [r3, #0]
      break;
 8002d6c:	e02f      	b.n	8002dce <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002d6e:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <SystemCoreClockUpdate+0xcc>)
 8002d72:	601a      	str	r2, [r3, #0]
      break;
 8002d74:	e02b      	b.n	8002dce <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <SystemCoreClockUpdate+0xc4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d7e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <SystemCoreClockUpdate+0xc4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	3302      	adds	r3, #2
 8002d90:	60bb      	str	r3, [r7, #8]
      {
        /* HSI oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
      }
#else      
      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <SystemCoreClockUpdate+0x6e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <SystemCoreClockUpdate+0xd0>)
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002da2:	6013      	str	r3, [r2, #0]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
      break;
 8002da4:	e013      	b.n	8002dce <SystemCoreClockUpdate+0x96>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <SystemCoreClockUpdate+0xc4>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	3301      	adds	r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <SystemCoreClockUpdate+0xcc>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002dc2:	6013      	str	r3, [r2, #0]
      break;
 8002dc4:	e003      	b.n	8002dce <SystemCoreClockUpdate+0x96>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002dc8:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <SystemCoreClockUpdate+0xcc>)
 8002dca:	601a      	str	r2, [r3, #0]
      break;
 8002dcc:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <SystemCoreClockUpdate+0xc4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <SystemCoreClockUpdate+0xd4>)
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <SystemCoreClockUpdate+0xc8>)
 8002dec:	6013      	str	r3, [r2, #0]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	20000004 	.word	0x20000004
 8002e04:	007a1200 	.word	0x007a1200
 8002e08:	003d0900 	.word	0x003d0900
 8002e0c:	20000008 	.word	0x20000008

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	4e0d      	ldr	r6, [pc, #52]	; (8002e48 <__libc_init_array+0x38>)
 8002e14:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <__libc_init_array+0x3c>)
 8002e16:	1ba4      	subs	r4, r4, r6
 8002e18:	10a4      	asrs	r4, r4, #2
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	42a5      	cmp	r5, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	4e0b      	ldr	r6, [pc, #44]	; (8002e50 <__libc_init_array+0x40>)
 8002e22:	4c0c      	ldr	r4, [pc, #48]	; (8002e54 <__libc_init_array+0x44>)
 8002e24:	f000 f818 	bl	8002e58 <_init>
 8002e28:	1ba4      	subs	r4, r4, r6
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	42a5      	cmp	r5, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e38:	4798      	blx	r3
 8002e3a:	3501      	adds	r5, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e42:	4798      	blx	r3
 8002e44:	3501      	adds	r5, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002f08 	.word	0x08002f08
 8002e4c:	08002f08 	.word	0x08002f08
 8002e50:	08002f08 	.word	0x08002f08
 8002e54:	08002f0c 	.word	0x08002f0c

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr
